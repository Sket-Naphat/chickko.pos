import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { api } from "../lib/api";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
function formatDate(dateStr) {
    const date = new Date(dateStr);
    if (isNaN(date)) return dateStr;

    const day = date.getDate();
    const month = date.getMonth();
    const year = date.getFullYear();
    const dayName = days[date.getDay()];
    return `${dayName} ${day} ${months[month]} ${year}`;
}
const days = [
    "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
    "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
    "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
    "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò",
    "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
    "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå",
    "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå",
];
const months = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
];

export default function IncomeDetail() {
    const location = useLocation();
    const navigate = useNavigate();
    const [loading, setLoading] = useState(false);
    const [detailData, setDetailData] = useState(null);
    const [ordersData, setOrdersData] = useState([]); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö orders
    const [ordersLoading, setOrdersLoading] = useState(false); // ‚úÖ loading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö orders

    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    const { incomeData } = location.state || {};

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    useEffect(() => {
        if (!incomeData) {
            navigate('/income', { state: { activeTab: 'income' } });
            return;
        }
    }, [incomeData, navigate]);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ API ‡πÄ‡∏â‡∏û‡∏≤‡∏∞)
    useEffect(() => {
        if (!incomeData) return;

        const fetchAllData = async () => {
            setLoading(true);
            setOrdersLoading(true);

            try {
                // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• detail
                setDetailData(incomeData);

                // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• orders
                const ordersResponse = await api.post('/orders/GetIncomeOrdersByDate', {
                    SaleDate: incomeData.saleDate
                }, {
                    timeout: 30000, // ‚úÖ ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    retry: 3, // ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    retryDelay: 2000 // ‚úÖ ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                });

                console.log('Orders API Response:', ordersResponse.data);

                // ‚úÖ ‡πÉ‡∏ä‡πâ structure ‡∏à‡∏≤‡∏Å API response
                if (ordersResponse.data?.success && ordersResponse.data?.data) {
                    const apiOrders = ordersResponse.data.data.map(order => ({
                        orderId: order.orderId,
                        orderTime: order.orderTime,
                        customerName: order.customerName,
                        totalPrice: order.totalPrice, // ‚úÖ ‡πÉ‡∏ä‡πâ totalPrice ‡∏à‡∏≤‡∏Å API
                        orderDiscount: order.discountPrice || 0,
                        orderTypeId: order.orderTypeId,
                        orderRemark: order.orderRemark || '',
                        discountName: order.discountName || '',
                        items: order.orderDetails?.map(detail => ({
                            name: detail.menuName,
                            qty: detail.quantity,
                            price: detail.price / detail.quantity, // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô
                            toppings: detail.toppings || []
                        })) || []
                    }));

                    setOrdersData(apiOrders);
                } else {
                    setOrdersData([]);
                }

            } catch (error) {
                console.error("Error fetching orders data:", error);
                // ‚úÖ Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏° API structure)
                setOrdersData([
                    {
                        orderId: "9107",
                        orderTime: "2025-09-14T20:30:13",
                        customerName: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ 026",
                        totalPrice: 348,
                        items: [
                            {
                                name: "‡∏£‡∏≤‡∏°‡∏¢‡∏≠‡∏ô‡∏ä‡∏≠‡∏™‡πÄ‡∏Å‡∏µ‡πä‡∏¢‡∏î‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î",
                                qty: 1,
                                price: 184
                            },
                            {
                                name: "‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß",
                                qty: 1,
                                price: 69
                            }
                        ]
                    },
                    {
                        orderId: "9093",
                        orderTime: "2025-09-14T12:52:45",
                        customerName: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà 313",
                        totalPrice: 253,
                        items: [
                            {
                                name: "‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
                                qty: 1,
                                price: 253
                            }
                        ]
                    }
                ]);
            } finally {
                setLoading(false);
                setOrdersLoading(false);
            }
        };

        fetchAllData();
    }, [incomeData]);

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    const formatTime = (timeStr) => {
        const date = new Date(timeStr);
        if (isNaN(date)) return timeStr;
        return date.toLocaleTimeString('th-TH', {
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô orderTypeId
    const dineInCount = ordersData.filter(order => order.orderTypeId === 1).length;
    const takeawayCount = ordersData.filter(order => order.orderTypeId === 2).length;

    if (!incomeData) {
        return null;
    }

    return (
        <div className="min-h-screen bg-base-200 flex flex-col items-center px-2 py-4 sm:px-4 sm:py-6">
            <div className="w-full max-w-4xl card bg-base-100 shadow-xl p-3 sm:p-6">
                {/* ‚úÖ Header ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö */}
                <div className="flex items-center gap-4 mb-6">
                    <button
                        className="btn btn-sm btn-circle btn-outline"
                        onClick={() => navigate('/income', { state: { activeTab: 'income' } })}
                        title="‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"
                    >
                        ‚Üê
                    </button>
                    <div>
                        <h1 className="text-2xl font-bold text-primary">üè™ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô</h1>
                        <p className="text-base-content/70">
                            {formatDate(incomeData.saleDate)}
                        </p>
                    </div>
                </div>

                {loading ? (
                    <div className="flex flex-col items-center justify-center py-12">
                        <span className="loading loading-spinner loading-lg text-primary"></span>
                        <span className="mt-3 text-sm text-base-content/70">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‚Ä¶</span>
                    </div>
                ) : (
                    <div className="space-y-6">
                        {/* ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å */}
                        <div className="card bg-gradient-to-r from-info/10 to-secondary/10 border border-primary/20">
                            <div className="card-body">
                                <h2 className="card-title text-primary mb-4">üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢</h2>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div className="space-y-4">
                                        <div className="flex justify-between items-center p-3 bg-base-100 rounded-lg">
                                            <span className="font-semibold">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°</span>
                                            <span className="text-success font-bold text-xl">
                                                ‡∏ø{detailData?.totalAmount?.toLocaleString() || 0}
                                            </span>
                                        </div>
                                        <div className="flex justify-between items-center p-3 bg-base-100 rounded-lg">
                                            <span className="font-semibold">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏•</span>
                                            <span className="text-info font-bold text-xl">
                                                {detailData?.orders?.toLocaleString() || 0}
                                            </span>
                                        </div>
                                    </div>
                                    <div className="space-y-4">
                                        <div className="flex justify-between items-center p-3 bg-base-100 rounded-lg">
                                            <span className="font-semibold">‡∏¢‡∏≠‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ö‡∏¥‡∏•</span>
                                            <span className="text-error font-bold text-xl">
                                                ‡∏ø{detailData?.avgPerOrder?.toLocaleString() || 0}
                                            </span>
                                        </div>
                                        <div className="flex justify-between items-center p-3 bg-base-100 rounded-lg">
                                            <span className="font-semibold">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô / ‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô</span>
                                            <span className="text-warning font-bold text-xl">
                                                {dineInCount?.toLocaleString() || 0} / {takeawayCount?.toLocaleString() || 0}
                                            </span>
                                        </div>

                                    </div>

                                </div>
                            </div>
                        </div>

                        {/* ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ */}
                        <div className="card bg-base-100 border border-base-300">
                            <div className="card-body">
                                <div className="flex items-center justify-between mb-4">
                                    <h2 className="card-title text-accent">üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h2>
                                    <div className="badge badge-info">
                                        {ordersData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                                    </div>
                                </div>

                                {ordersLoading ? (
                                    <div className="flex items-center justify-center py-8">
                                        <span className="loading loading-spinner loading-md text-primary"></span>
                                        <span className="ml-2 text-sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå...</span>
                                    </div>
                                ) : ordersData.length === 0 ? (
                                    <div className="text-center text-base-content/60 py-8">
                                        <div className="text-4xl mb-2">üì¶</div>
                                        <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
                                    </div>
                                ) : (
                                    <div className="space-y-3">
                                        {/* ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏° */}
                                        <div className="card bg-gradient-to-r from-success/10 to-info/10 border border-success/20 mt-4">
                                            <div className="card-body p-4">
                                                <div className="flex justify-between items-center">
                                                    <div>
                                                        <div className="font-bold text-lg">üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°</div>
                                                        <div className="text-sm text-base-content/70">
                                                            {ordersData.length} ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‚Ä¢ {ordersData.reduce((sum, order) => sum + (order.items?.length || 0), 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                                                        </div>
                                                    </div>
                                                    <div className="text-right">
                                                        <div className="text-2xl font-bold text-success">
                                                            ‡∏ø{ordersData.reduce((sum, order) => sum + (order.totalPrice || 0), 0).toLocaleString()}
                                                        </div>
                                                        <div className="text-xs text-base-content/60">
                                                            ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        {ordersData
                                            .slice() // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á copy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö original array
                                            .sort((a, b) => new Date(b.orderTime) - new Date(a.orderTime)) // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤ (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
                                            .map((order, index, arr) => (
                                                <div key={order.orderId || index} className="collapse collapse-arrow bg-base-200 border border-base-300">
                                                    <input type="checkbox" className="collapse-toggle" />
                                                    <div className="collapse-title">
                                                        <div className="flex items-center justify-between">
                                                            <div className="flex items-center gap-3">
                                                                {/* ‚úÖ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô #1 */}
                                                                <div className="badge badge-primary badge-sm">#{arr.length - index}</div>
                                                                <div>
                                                                    <div className="font-semibold text-base">
                                                                        {order.customerName || `‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${order.orderId}`}  {order.orderTypeId === 1 ? <span className="badge badge-info badge-xs">üè™ ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô</span> : order.orderTypeId === 2 ? <span className="badge badge-accent badge-xs">üõµ ‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô</span> : ''}
                                                                    </div>
                                                                    <div className="text-sm text-base-content/70">
                                                                        üïê {formatTime(order.orderTime)}
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div className="text-right">
                                                                <div className="font-bold text-lg text-success">
                                                                    ‡∏ø{order.totalPrice?.toLocaleString() || 0}
                                                                </div>
                                                                <div className="text-xs text-base-content/60">
                                                                    {order.items?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div className="collapse-content">
                                                        <div className="border-t border-base-300 pt-4">
                                                            <h4 className="font-semibold mb-3 text-sm">üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</h4>
                                                            <div className="space-y-2">
                                                                {order.items?.map((item, itemIndex) => (
                                                                    <div key={itemIndex} className="flex justify-between items-start p-3 bg-base-100 rounded-lg">
                                                                        <div className="flex-1">
                                                                            <div className="font-medium text-sm">
                                                                                {item.name}
                                                                            </div>

                                                                            {item.toppings && item.toppings.length > 0 && (
                                                                                <div className="mt-2">
                                                                                    <div className="text-xs text-orange-600 font-medium mb-1 flex items-center gap-1">
                                                                                        <span>Topping : </span>
                                                                                    </div>
                                                                                    <div className="flex flex-wrap gap-1">
                                                                                        {item.toppings.map((topping, toppingIndex) => (
                                                                                            <span
                                                                                                key={toppingIndex}
                                                                                                className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs bg-gradient-to-r from-orange-100 to-yellow-100 text-orange-700 border border-orange-200 shadow-sm"
                                                                                            >
                                                                                                <span className="text-xs">+</span>
                                                                                                <span>{topping.toppingNames || topping}</span>
                                                                                            </span>
                                                                                        ))}
                                                                                    </div>
                                                                                </div>
                                                                            )}
                                                                            <div className="text-xs text-base-content/60 mt-1">
                                                                                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.qty} | ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ä‡∏¥‡πâ‡∏ô: ‡∏ø{item.price?.toLocaleString() || 0}
                                                                            </div>
                                                                        </div>
                                                                        <div className="text-right ml-3">
                                                                            <div className="font-bold text-success">
                                                                                ‡∏ø{((item.qty || 1) * (item.price || 0)).toLocaleString()}
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                )) || (
                                                                        <div className="text-center text-base-content/60 py-4">
                                                                            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                                                                        </div>
                                                                    )}
                                                            </div>

                                                            {/* ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå */}
                                                            <div className="mt-4 pt-3 border-t border-base-300/50">
                                                                <div className="grid grid-cols-2 gap-4 text-xs">
                                                                    <div>
                                                                        <span className="text-base-content/70">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</span>
                                                                        <span className="ml-2 font-semibold">{order.orderRemark}</span>
                                                                    </div>
                                                                    <div>
                                                                        <span className="text-base-content/70">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:</span>
                                                                        <span className="ml-2 font-semibold text-success">‡∏ø {order.totalPrice + order.orderDiscount}</span>
                                                                    </div>

                                                                    {order.orderDiscount > 0 && (
                                                                        <>
                                                                            <div>
                                                                                <span className="text-base-content/70">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:</span>
                                                                                <span className="ml-2 font-semibold text-error">{order.discountName}</span>
                                                                            </div>

                                                                            <div>
                                                                                <span className="text-base-content/70">‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:</span>
                                                                                <span className="ml-2 font-semibold text-error">‡∏ø {order.orderDiscount}</span>
                                                                            </div>
                                                                        </>
                                                                    )}
                                                                    <div>
                                                                        <span className="text-base-content/70">‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:</span>
                                                                        <span className="ml-2 font-semibold">{order.orderId}</span>
                                                                    </div>
                                                                    <div>
                                                                        <span className="text-base-content/70">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡πà‡∏á:</span>
                                                                        <span className="ml-2 font-semibold">{formatTime(order.orderTime)}</span>
                                                                    </div>

                                                                    <div>
                                                                        <span className="text-base-content/70">‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°:</span>
                                                                        <span className="ml-2">
                                                                            {order.orderTypeId === 1 ? <span className="badge badge-info badge-xs">üè™ ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô</span> : order.orderTypeId === 2 ? <span className="badge badge-accent badge-xs">üõµ ‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô</span> : ''}
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}


                                    </div>
                                )}
                            </div>
                        </div>

                        {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ */}
                        {/* <div className="flex gap-3 justify-center">
                            <button
                                className="btn btn-outline"
                                onClick={() => navigate('/income')}
                            >
                                ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                            </button>
                            <button
                                className="btn btn-primary"
                                onClick={() => {
                                    // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                                    alert('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ');
                                }}
                            >
                                ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                            </button>
                        </div> */}
                    </div>
                )}
            </div>
        </div>
    );
}