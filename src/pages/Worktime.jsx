// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏ô‡∏≤‡∏ó‡∏µ
function formatWorktime(val) {
  const hours = Math.floor(val);                          // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏ï‡πá‡∏°
  const minutes = Math.round((val - hours) * 60);         // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° * 60 = ‡∏ô‡∏≤‡∏ó‡∏µ
  return `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó
function formatCurrency(val) {
  if (typeof val !== "number") return val;
  return val.toLocaleString("th-TH", { style: "currency", currency: "THB", minimumFractionDigits: 2 });
}

import React, { useEffect, useState } from 'react';
import Cookies from 'js-cookie';
import { api } from '../lib/api';
import StaffWorktime from '../components/workTime/StaffWorktime';

// ‚úÖ  EmployeeDetailWorktime
function EmployeeDetailWorktime({ employee, onBack }) {
  const [history, setHistory] = React.useState([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState("");

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edit time modal
  const [editTimeModal, setEditTimeClockInModal] = React.useState({
    isOpen: false,
    workDate: '',
    currentTimeClockIn: '',
    newTimeClockIn: '',
    employeeID: null
  });

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edit time clock out modal
  const [editTimeClockOutModal, setEditTimeClockOutModal] = React.useState({
    isOpen: false,
    workDate: '',
    currentTimeClockOut: '',
    newTimeClockOut: '',
    employeeID: null
  });

  const [editLoading, setEditLoading] = React.useState(false);

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• authData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  const authData = React.useMemo(() => {
    const raw = Cookies.get("authData");
    if (raw) {
      try {
        return JSON.parse(raw);
      } catch {
        return null;
      }
    }
    return null;
  }, []);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á options ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô StaffWorktime
  const startYear = 2025, startMonth = 9;
  const now = new Date();
  const currentYear = now.getFullYear();
  const currentMonth = now.getMonth() + 1;
  const monthOptions = React.useMemo(() => {
    let options = [];
    for (let y = startYear; y <= currentYear; y++) {
      let mStart = (y === startYear) ? startMonth : 1;
      let mEnd = (y === currentYear) ? currentMonth : 12;
      for (let m = mStart; m <= mEnd; m++) {
        options.push({
          value: `${y}-${String(m).padStart(2, '0')}`,
          label: `${y} - ${m}`,
          year: y,
          month: String(m).padStart(2, '0')
        });
      }
    }
    return options;
  }, [currentYear, currentMonth]);

  const nowMonth = String(currentMonth).padStart(2, '0');
  const nowYear = String(currentYear);
  const [month, setMonth] = React.useState(nowMonth);
  const [year, setYear] = React.useState(nowYear);

  const employeeID = React.useMemo(() => employee?.employeeID, [employee?.employeeID]);

  React.useEffect(() => {
    if (!employeeID || !month || !year) return;

    setLoading(true);
    setError("");

    api.post('/worktime/GetWorkTimeHistoryByEmployeeID', {
      employeeID: employeeID,
      workMonth: month,
      workYear: year
    })
      .then(res => {
        const mapped = (res.data || []).map(item => ({
          workDate: item.workDate,
          timeClockIn: item.timeClockIn,
          timeClockOut: item.timeClockOut,
          totalWorktime: item.totalWorktime,
          clockInLocation: item.clockInLocation,
          clockOutLocation: item.clockOutLocation
        }));
        setHistory(mapped.sort((a, b) => new Date(b.workDate) - new Date(a.workDate)));
      })
      .catch(err => {
        setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• " + (err.message || ""));
      })
      .finally(() => setLoading(false));
  }, [employeeID, month, year]);

  const formatThaiDate = React.useCallback((dateStr) => {
    const days = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"];
    const months = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."];
    const date = new Date(dateStr);
    if (isNaN(date)) return dateStr;
    const dayName = days[date.getDay()];
    const day = date.getDate();
    const monthName = months[date.getMonth()];
    return `${dayName} ${day} ${monthName}`;
  }, []);

  const getGoogleMapsUrl = (clockInLocation) => {
    if (!clockInLocation) return null;

    var location = JSON.parse(clockInLocation);
    var latitude = location.latitude;
    var longitude = location.longitude;
    return `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô
  const openEditTimeClockInModal = (item) => {
    setEditTimeClockInModal({
      isOpen: true,
      workDate: item.workDate,
      currentTimeClockIn: item.timeClockIn || '',
      newTimeClockIn: item.timeClockIn || '',
      employeeID: employeeID
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î modal
  const closeEditTimeModal = () => {
    setEditTimeClockInModal({
      isOpen: false,
      workDate: '',
      currentTimeClockIn: '',
      newTimeClockIn: '',
      employeeID: null
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤
  const saveClockInEditTime = async () => {
    if (!editTimeModal.newTimeClockIn || !editTimeModal.workDate || !editTimeModal.employeeID) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    setEditLoading(true);
    try {
      await api.post('/worktime/UpdateTimeClockIn', {
        employeeID: editTimeModal.employeeID,
        workDate: editTimeModal.workDate,
        TimeClockIn: editTimeModal.newTimeClockIn,
        CreatedBy: authData?.userId
      });

      alert('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      closeEditTimeModal();

      // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      window.location.reload();

    } catch (err) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + (err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ'));
    } finally {
      setEditLoading(false);
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô
  const openEditTimeClockOutModal = (item) => {
    setEditTimeClockOutModal({
      isOpen: true,
      workDate: item.workDate,
      currentTimeClockOut: item.timeClockOut || '',
      newTimeClockOut: item.timeClockOut || '',
      employeeID: employeeID
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô
  const closeEditTimeClockOutModal = () => {
    setEditTimeClockOutModal({
      isOpen: false,
      workDate: '',
      currentTimeClockOut: '',
      newTimeClockOut: '',
      employeeID: null
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô
  const saveClockOutEditTime = async () => {
    if (!editTimeClockOutModal.newTimeClockOut || !editTimeClockOutModal.workDate || !editTimeClockOutModal.employeeID) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    setEditLoading(true);
    try {
      await api.post('/worktime/UpdateTimeClockOut', {
        employeeID: editTimeClockOutModal.employeeID,
        workDate: editTimeClockOutModal.workDate,
        TimeClockOut: editTimeClockOutModal.newTimeClockOut,
        CreatedBy: authData?.userId
      });

      alert('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      closeEditTimeClockOutModal();

      // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      window.location.reload();

    } catch (err) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + (err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ'));
    } finally {
      setEditLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-base-200 flex flex-col items-center px-2 py-4 sm:px-4 sm:py-6">
      {/* ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î container ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö */}
      <div className="w-full max-w-lg card bg-base-100 shadow-xl p-3 sm:p-6">
        {/* ‚úÖ Header ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö */}
        <div className="flex items-center gap-3 mb-4">
          <button
            onClick={onBack}
            className="btn btn-sm btn-circle btn-outline"
            title="‡∏Å‡∏•‡∏±‡∏ö"
          >
            ‚Üê
          </button>
          <h1 className="text-xl font-bold text-primary">
            ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô
          </h1>
        </div>

        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö */}
        <div className="bg-primary/10 p-3 rounded-lg mb-4 flex items-center gap-2">
          <span className="text-lg">üë§</span>
          <span className="font-semibold text-primary">
            {employee?.employeeName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}
          </span>
        </div>

        <section>
          {/* ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö */}
          <div className="mb-4 flex items-center gap-2 justify-center">
            <label className="font-semibold text-sm">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</label>
            <div className="dropdown">
              <label tabIndex={0} className="btn btn-sm btn-outline flex items-center gap-2">
                {(() => {
                  const months = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."];
                  const monthLabel = months[parseInt(month, 10) - 1];
                  return `${monthLabel} ${year}`;
                })()}
                <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M19 9l-7 7-7-7" />
                </svg>
              </label>
              <ul tabIndex={0} className="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52 max-h-60 overflow-y-auto z-50">
                {monthOptions.map(opt => {
                  const months = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."];
                  const monthLabel = months[parseInt(opt.month, 10) - 1];
                  return (
                    <li key={opt.value}>
                      <button
                        className={`w-full text-left text-sm ${month === opt.month && year === String(opt.year) ? 'bg-primary text-white' : ''}`}
                        onClick={() => {
                          setMonth(opt.month);
                          setYear(String(opt.year));
                        }}
                      >{`${monthLabel} ${opt.year}`}</button>
                    </li>
                  );
                })}
              </ul>
            </div>
          </div>

          {loading ? (
            <div className="flex flex-col items-center justify-center py-8">
              <span className="loading loading-spinner loading-lg text-primary"></span>
              <span className="mt-2 text-sm">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Ä¶</span>
            </div>
          ) : error ? (
            <div className="alert alert-error shadow-lg mb-4">
              <span>{error}</span>
            </div>
          ) : (
            /* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô StaffWorktime */
            <div className="space-y-2">
              {history.length === 0 ? (
                <div className="text-center py-8 text-base-content/60">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
              ) : (
                history.map((item, idx) => {
                  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô
                  let isOutsideStore = false;
                  let outsideMessages = [];

                  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô
                  if (item.clockInLocation) {
                    try {
                      const clockInData = JSON.parse(item.clockInLocation);
                      if (clockInData.isWithinStoreRadius === false) {
                        isOutsideStore = true;
                        outsideMessages.push('‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô');
                      }
                    } catch (e) {
                      console.error('Error parsing clockInLocation:', e);
                    }
                  }

                  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô
                  if (item.clockOutLocation) {
                    try {
                      const clockOutData = JSON.parse(item.clockOutLocation);
                      if (clockOutData.isWithinStoreRadius === false) {
                        isOutsideStore = true;
                        outsideMessages.push('‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô');
                      }
                    } catch (e) {
                      console.error('Error parsing clockOutLocation:', e);
                    }
                  }

                  return (
                    /* ‚úÖ Card ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà */
                    <div key={idx} className={`${isOutsideStore
                      ? 'bg-error/10 border-error/30 border-2'
                      : 'bg-base-100 border-base-300 border'
                      } rounded-lg p-3 shadow-sm hover:shadow-md transition-shadow`}>

                      {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà */}
                      {isOutsideStore && (
                        <div className="bg-error/20 border border-error/40 rounded-lg p-2 mb-3">
                          <div className="flex items-center gap-2">
                            <span className="text-error text-lg">‚ö†Ô∏è</span>
                            <div>
                              <div className="font-semibold text-error text-sm">
                                ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î{outsideMessages.join(' ‡πÅ‡∏•‡∏∞ ')}‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô
                              </div>
                              <div className="text-xs text-error/70">
                                ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                              </div>
                            </div>
                          </div>
                        </div>
                      )}

                      <div className="flex justify-between items-start mb-2">
                        <div className={`font-semibold text-sm ${isOutsideStore ? 'text-error' : 'text-primary'
                          }`}>
                          {formatThaiDate(item.workDate)}
                        </div>
                        <div className="text-xs text-base-content/60">
                          {item.totalWorktime ? formatWorktime(item.totalWorktime) : '-'}
                        </div>
                      </div>

                      {/* ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö inline */}
                      <div className="flex justify-between text-sm">
                        <div className="flex items-center gap-1">
                          <span className="text-success">‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô ‚¨áÔ∏è</span>
                          <span>{item.timeClockIn || '-'}</span>
                          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin (userPermissionId === 1) */}
                          {authData?.userPermissionId === 1 && (
                            <button
                              className="btn btn-xs btn-ghost btn-outline"
                              title='‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'
                              onClick={() => openEditTimeClockInModal(item)}
                            >
                              üìã
                            </button>
                          )}
                        </div>
                        <div className="flex items-center gap-1">
                          <span className="text-error">‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô ‚¨ÜÔ∏è</span>
                          <span>{item.timeClockOut || '-'}</span>
                          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin (userPermissionId === 1) */}
                          {authData?.userPermissionId === 1 && (
                            <button
                              className="btn btn-xs btn-ghost btn-outline"
                              title='‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'
                              onClick={() => openEditTimeClockOutModal(item)}
                            >
                              üìã
                            </button>
                          )}
                        </div>
                      </div>

                      {/* ‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô */}
                      <div className="flex justify-between text-sm">
                        <div>
                          {item.clockInLocation ? (
                            <button
                              className={`btn btn-xs btn-outline mt-2 ${(() => {
                                try {
                                  const clockInData = JSON.parse(item.clockInLocation);
                                  return clockInData.isWithinStoreRadius === false ? 'btn-error' : 'btn-primary';
                                } catch {
                                  return 'btn-primary';
                                }
                              })()
                                }`}
                              onClick={() => window.open(getGoogleMapsUrl(item.clockInLocation), '_blank')}
                              title="‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"
                            >
                              üìç ‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                            </button>
                          ) : (
                            <span className="text-xs text-gray-500 mt-2">-</span>
                          )}
                        </div>
                        <div>
                          {item.clockOutLocation ? (
                            <button
                              className={`btn btn-xs btn-outline mt-2 ${(() => {
                                try {
                                  const clockOutData = JSON.parse(item.clockOutLocation);
                                  return clockOutData.isWithinStoreRadius === false ? 'btn-error' : 'btn-primary';
                                } catch {
                                  return 'btn-primary';
                                }
                              })()
                                }`}
                              onClick={() => window.open(getGoogleMapsUrl(item.clockOutLocation), '_blank')}
                              title="‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"
                            >
                              üìç ‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                            </button>
                          ) : (
                            <span className="text-xs text-gray-500 mt-2">-</span>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })
              )}
            </div>
          )}
        </section>
      </div>

      {/* ‚úÖ Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô */}
      {editTimeModal.isOpen && (
        <div className="modal modal-open">
          <div className="modal-box max-w-md">
            <h3 className="font-bold text-lg mb-4">üìã ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô</h3>

            {/* ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô */}
            <div className="bg-base-200 p-3 rounded-lg mb-4">
              <div className="font-semibold text-primary">
                üë§ {employee?.employeeName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}
              </div>
              <div className="text-sm text-base-content/70">
                üìÖ {formatThaiDate(editTimeModal.workDate)}
              </div>
            </div>

            {/* ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
            <div className="form-control mb-4">
              <label className="label">
                <span className="label-text font-semibold">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</span>
              </label>
              <div className="bg-base-200 p-3 rounded-lg">
                <div className="text-lg font-bold text-primary">
                  {editTimeModal.currentTimeClockIn || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                </div>
              </div>
            </div>

            {/* ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà */}
            <div className="form-control mb-6">
              <label className="label">
                <span className="label-text font-semibold">‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</span>
              </label>

              {/* ‚úÖ Custom 24-hour time input */}
              <div className="flex gap-2 items-center">
                {/* ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á */}
                <div className="flex flex-col items-center">
                  <label className="text-xs text-base-content/70 mb-1">‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</label>
                  <select
                    value={editTimeModal.newTimeClockIn ? editTimeModal.newTimeClockIn.split(':')[0] : '00'}
                    onChange={(e) => {
                      const currentTime = editTimeModal.newTimeClockIn || '00:00:00';
                      const [, minutes, seconds] = currentTime.split(':');
                      const newTime = `${e.target.value}:${minutes || '00'}:${seconds || '00'}`;
                      setEditTimeClockInModal(prev => ({
                        ...prev,
                        newTimeClockIn: newTime
                      }));
                    }}
                    className="select select-bordered select-sm w-20"
                    disabled={editLoading}
                  >
                    {Array.from({ length: 24 }, (_, i) => (
                      <option key={i} value={String(i).padStart(2, '0')}>
                        {String(i).padStart(2, '0')}
                      </option>
                    ))}
                  </select>
                </div>

                <span className="text-2xl font-bold text-base-content/50 mt-6">:</span>

                {/* ‡∏ô‡∏≤‡∏ó‡∏µ */}
                <div className="flex flex-col items-center">
                  <label className="text-xs text-base-content/70 mb-1">‡∏ô‡∏≤‡∏ó‡∏µ</label>
                  <select
                    value={editTimeModal.newTimeClockIn ? editTimeModal.newTimeClockIn.split(':')[1] : '00'}
                    onChange={(e) => {
                      const currentTime = editTimeModal.newTimeClockIn || '00:00:00';
                      const [hours, , seconds] = currentTime.split(':');
                      const newTime = `${hours || '00'}:${e.target.value}:${seconds || '00'}`;
                      setEditTimeClockInModal(prev => ({
                        ...prev,
                        newTimeClockIn: newTime
                      }));
                    }}
                    className="select select-bordered select-sm w-20"
                    disabled={editLoading}
                  >
                    {Array.from({ length: 60 }, (_, i) => (
                      <option key={i} value={String(i).padStart(2, '0')}>
                        {String(i).padStart(2, '0')}
                      </option>
                    ))}
                  </select>
                </div>

                <span className="text-2xl font-bold text-base-content/50 mt-6">:</span>

                {/* ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ */}
                <div className="flex flex-col items-center">
                  <label className="text-xs text-base-content/70 mb-1">‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</label>
                  <select
                    value={editTimeModal.newTimeClockIn ? editTimeModal.newTimeClockIn.split(':')[2] || '00' : '00'}
                    onChange={(e) => {
                      const currentTime = editTimeModal.newTimeClockIn || '00:00:00';
                      const [hours, minutes] = currentTime.split(':');
                      const newTime = `${hours || '00'}:${minutes || '00'}:${e.target.value}`;
                      setEditTimeClockInModal(prev => ({
                        ...prev,
                        newTimeClockIn: newTime
                      }));
                    }}
                    className="select select-bordered select-sm w-20"
                    disabled={editLoading}
                  >
                    {Array.from({ length: 60 }, (_, i) => (
                      <option key={i} value={String(i).padStart(2, '0')}>
                        {String(i).padStart(2, '0')}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
              <div className="mt-3 p-2 bg-base-200 rounded-lg text-center">
                <div className="text-sm text-base-content/70">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</div>
                <div className="text-lg font-bold text-primary font-mono">
                  {editTimeModal.newTimeClockIn || '00:00:00'}
                </div>
              </div>
            </div>

            {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ */}
            <div className="modal-action">
              <button
                className="btn btn-ghost"
                onClick={closeEditTimeModal}
                disabled={editLoading}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                className="btn btn-primary"
                onClick={saveClockInEditTime}
                disabled={editLoading || !editTimeModal.newTimeClockIn}
              >
                {editLoading ? (
                  <>
                    <span className="loading loading-spinner loading-sm"></span>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                  </>
                ) : (
                  <>
                    üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‚úÖ Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô */}
      {editTimeClockOutModal.isOpen && (
        <div className="modal modal-open">
          <div className="modal-box max-w-md">
            <h3 className="font-bold text-lg mb-4">üìã ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô</h3>

            {/* ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô */}
            <div className="bg-base-200 p-3 rounded-lg mb-4">
              <div className="font-semibold text-primary">
                üë§ {employee?.employeeName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}
              </div>
              <div className="text-sm text-base-content/70">
                üìÖ {formatThaiDate(editTimeClockOutModal.workDate)}
              </div>
            </div>

            {/* ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
            <div className="form-control mb-4">
              <label className="label">
                <span className="label-text font-semibold">‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</span>
              </label>
              <div className="bg-base-200 p-3 rounded-lg">
                <div className="text-lg font-bold text-primary">
                  {editTimeClockOutModal.currentTimeClockOut || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                </div>
              </div>
            </div>

            {/* ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà */}
            <div className="form-control mb-6">
              <label className="label">
                <span className="label-text font-semibold">‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</span>
              </label>

              {/* ‚úÖ Custom 24-hour time input */}
              <div className="flex gap-2 items-center">
                {/* ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á */}
                <div className="flex flex-col items-center">
                  <label className="text-xs text-base-content/70 mb-1">‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</label>
                  <select
                    value={editTimeClockOutModal.newTimeClockOut ? editTimeClockOutModal.newTimeClockOut.split(':')[0] : '00'}
                    onChange={(e) => {
                      const currentTime = editTimeClockOutModal.newTimeClockOut || '00:00:00';
                      const [, minutes, seconds] = currentTime.split(':');
                      const newTime = `${e.target.value}:${minutes || '00'}:${seconds || '00'}`;
                      setEditTimeClockOutModal(prev => ({
                        ...prev,
                        newTimeClockOut: newTime
                      }));
                    }}
                    className="select select-bordered select-sm w-20"
                    disabled={editLoading}
                  >
                    {Array.from({ length: 24 }, (_, i) => (
                      <option key={i} value={String(i).padStart(2, '0')}>
                        {String(i).padStart(2, '0')}
                      </option>
                    ))}
                  </select>
                </div>

                <span className="text-2xl font-bold text-base-content/50 mt-6">:</span>

                {/* ‡∏ô‡∏≤‡∏ó‡∏µ */}
                <div className="flex flex-col items-center">
                  <label className="text-xs text-base-content/70 mb-1">‡∏ô‡∏≤‡∏ó‡∏µ</label>
                  <select
                    value={editTimeClockOutModal.newTimeClockOut ? editTimeClockOutModal.newTimeClockOut.split(':')[1] : '00'}
                    onChange={(e) => {
                      const currentTime = editTimeClockOutModal.newTimeClockOut || '00:00:00';
                      const [hours, , seconds] = currentTime.split(':');
                      const newTime = `${hours || '00'}:${e.target.value}:${seconds || '00'}`;
                      setEditTimeClockOutModal(prev => ({
                        ...prev,
                        newTimeClockOut: newTime
                      }));
                    }}
                    className="select select-bordered select-sm w-20"
                    disabled={editLoading}
                  >
                    {Array.from({ length: 60 }, (_, i) => (
                      <option key={i} value={String(i).padStart(2, '0')}>
                        {String(i).padStart(2, '0')}
                      </option>
                    ))}
                  </select>
                </div>

                <span className="text-2xl font-bold text-base-content/50 mt-6">:</span>

                {/* ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ */}
                <div className="flex flex-col items-center">
                  <label className="text-xs text-base-content/70 mb-1">‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</label>
                  <select
                    value={editTimeClockOutModal.newTimeClockOut ? editTimeClockOutModal.newTimeClockOut.split(':')[2] || '00' : '00'}
                    onChange={(e) => {
                      const currentTime = editTimeClockOutModal.newTimeClockOut || '00:00:00';
                      const [hours, minutes] = currentTime.split(':');
                      const newTime = `${hours || '00'}:${minutes || '00'}:${e.target.value}`;
                      setEditTimeClockOutModal(prev => ({
                        ...prev,
                        newTimeClockOut: newTime
                      }));
                    }}
                    className="select select-bordered select-sm w-20"
                    disabled={editLoading}
                  >
                    {Array.from({ length: 60 }, (_, i) => (
                      <option key={i} value={String(i).padStart(2, '0')}>
                        {String(i).padStart(2, '0')}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
              <div className="mt-3 p-2 bg-base-200 rounded-lg text-center">
                <div className="text-sm text-base-content/70">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</div>
                <div className="text-lg font-bold text-primary font-mono">
                  {editTimeClockOutModal.newTimeClockOut || '00:00:00'}
                </div>
              </div>
            </div>

            {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ */}
            <div className="modal-action">
              <button
                className="btn btn-ghost"
                onClick={closeEditTimeClockOutModal}
                disabled={editLoading}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                className="btn btn-primary"
                onClick={saveClockOutEditTime}
                disabled={editLoading || !editTimeClockOutModal.newTimeClockOut}
              >
                {editLoading ? (
                  <>
                    <span className="loading loading-spinner loading-sm"></span>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                  </>
                ) : (
                  <>
                    üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (userPermissionId !== 3) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
function ManagementWorktime() {
  // ‚úÖ ALL HOOKS AT THE TOP
  const [selectedEmployee, setSelectedEmployee] = React.useState(null);

  const [dateFrom, setDateFrom] = React.useState(() => {
    const now = new Date();
    const currentDay = now.getDate();
    const year = now.getFullYear();
    const month = now.getMonth() + 1;

    if (currentDay <= 15) {
      return `${year}-${String(month).padStart(2, '0')}-01`;
    } else {
      return `${year}-${String(month).padStart(2, '0')}-16`;
    }
  });

  const [dateTo, setDateTo] = React.useState(() => {
    const now = new Date();
    const currentDay = now.getDate();
    const year = now.getFullYear();
    const month = now.getMonth() + 1;

    if (currentDay <= 15) {
      return `${year}-${String(month).padStart(2, '0')}-15`;
    } else {
      const lastDay = new Date(year, month, 0).getDate();
      return `${year}-${String(month).padStart(2, '0')}-${String(lastDay).padStart(2, '0')}`;
    }
  });

  const [filterType, setFilterType] = React.useState("period");

  const [selectedDate, setSelectedDate] = React.useState(() => {
    const d = new Date();
    return d.toISOString().slice(0, 10);
  });

  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState("");
  const [data, setData] = React.useState([]);
  const [paidWorktimes, setPaidWorktimes] = React.useState([]);

  // ‚úÖ MOVED THESE HOOKS TO THE TOP
  const [paymentModal, setPaymentModal] = React.useState({
    isOpen: false,
    employee: null,
    worktime: 0,
    wageCost: 0,
    dateFrom: '',
    dateTo: ''
  });
  const [paymentLoading, setPaymentLoading] = React.useState(false);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö confirm modal
  const [confirmModal, setConfirmModal] = React.useState({
    isOpen: false,
    title: '',
    content: null,
    resolve: null
  });

  // ‚úÖ useMemo and useEffect are also hooks - keep them after useState
  const authData = React.useMemo(() => {
    const raw = Cookies.get("authData");
    if (raw) {
      try {
        return JSON.parse(raw);
      } catch {
        return null;
      }
    }
    return null;
  }, []);

  React.useEffect(() => {
    if (selectedEmployee) return;

    setLoading(true);
    setError("");

    if (filterType === "period") {
      if (!dateFrom || !dateTo) {
        setLoading(false);
        return;
      }


      const startDay = dateFrom
      const endDay = dateTo

      api.post('/worktime/GetWorkTimeHistoryByPeriod', {
        StartDate: startDay,
        EndDate: endDay
      })
        .then(res => {
          setData(res.data || []);
        })
        .catch(err => {
          setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• " + (err.message || ""));
        })
        .finally(() => setLoading(false));

    } else if (filterType === "daily") {
      if (!selectedDate) {
        setLoading(false);
        return;
      }



      api.post('/worktime/GetWorkTimeHistoryByPeriod', {
        startDate: selectedDate,
        endDate: selectedDate
      })
        .then(res => {
          setData(res.data || []);
        })
        .catch(err => {
          setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• " + (err.message || ""));
        })
        .finally(() => setLoading(false));
    }
  }, [filterType, dateFrom, dateTo, selectedDate, selectedEmployee]);

  // ‚úÖ Define helper functions after hooks
  // Removed duplicate openPaymentModal declaration to fix redeclaration error.

  // ‚úÖ Helper function for Thai date formatting (short format)
  function formatThaiDate(dateStr) {
    const days = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"];
    const months = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."];
    const date = new Date(dateStr);
    if (isNaN(date)) return dateStr;
    const dayName = days[date.getDay()];
    const day = date.getDate();
    const monthName = months[date.getMonth()];
    return `${dayName} ${day} ${monthName}`;
  }

  const closePaymentModal = () => {
    setPaymentModal({
      isOpen: false,
      employee: null,
      worktime: 0,
      wageCost: 0,
      dateFrom: '',
      dateTo: ''
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ confirm modal
  const handleConfirm = () => {
    if (confirmModal.resolve) {
      confirmModal.resolve(true);
    }
    setConfirmModal({ isOpen: false, title: '', content: null, resolve: null });
  };

  const handleCancel = () => {
    if (confirmModal.resolve) {
      confirmModal.resolve(false);
    }
    setConfirmModal({ isOpen: false, title: '', content: null, resolve: null });
  };

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á confirmPayment ‡πÉ‡∏´‡πâ‡∏°‡∏µ popup confirm
  const confirmPayment = async () => {
    if (!paymentModal.employee) return;

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á confirm dialog ‡∏Å‡πà‡∏≠‡∏ô
    const confirmed = await new Promise((resolve) => {
      setConfirmModal({
        isOpen: true,
        title: 'üí≥ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô',
        content: (
          <div>
            <div className="font-bold mb-3 text-center">
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö
            </div>
            <div className="bg-primary/10 p-3 rounded-lg mb-4">
              <div className="font-bold text-primary text-lg text-center">
                üë§ {paymentModal.employee.employeeName}
              </div>
            </div>

            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:</span>
                <div className="font-semibold text-right max-w-xs">
                  {(() => {
                    const unpaidWorkDates = paidWorktimes
                      .filter(item =>
                        item.employeeID === paymentModal.employee.employeeID &&
                        !item.isPurchase &&
                        item.totalWorktime > 0
                      )
                      .map(item => formatThaiDate(item.workDate))
                      .join(', ');
                    return unpaidWorkDates || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
                  })()}
                </div>
              </div>
              <div className="flex justify-between">
                <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:</span>
                <span className="font-semibold text-primary">{formatWorktime(paymentModal.worktime)}</span>
              </div>
              <div className="flex justify-between border-t pt-2">
                <span>‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô:</span>
                <span className="font-bold text-success text-lg">{formatCurrency(paymentModal.wageCost)}</span>
              </div>
            </div>

            <div className="mt-4 p-3 bg-warning/10 rounded-lg text-center">
              <div className="text-warning font-semibold">‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>
              <div className="text-sm text-base-content/70">‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ</div>
            </div>
          </div>
        ),
        resolve: resolve
      });
    });

    if (!confirmed) return;

    setPaymentLoading(true);
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì worktime ‡πÅ‡∏•‡∏∞ wageCost ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (paymentModal.worktime <= 0 || paymentModal.wageCost <= 0) {
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå');
        setPaymentLoading(false);
        return;
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
      const unpaidWorkItems = paidWorktimes
        .filter(item =>
          item.employeeID === paymentModal.employee.employeeID &&
          !item.isPurchase &&
          item.totalWorktime > 0
        );

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
      const workDateItems = unpaidWorkItems.map(item => ({
        EmployeeID: item.employeeID,
        WorkDate: item.workDate,
        TotalWorktime: item.totalWorktime,
        WageCost: item.wageCost, // ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
        PurchaseDate: new Date().toISOString().slice(0, 10),
        IsPurchase: true,
        Remark: (() => {
          // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Remark ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
          const purchaseDate = new Date().toISOString().slice(0, 10);
          const totalAmount = formatCurrency(paymentModal.wageCost);

          if (unpaidWorkItems.length === 1) {
            // ‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            return `‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${paymentModal.employee.employeeName} ‡∏ß‡∏±‡∏ô ${formatThaiDate(item.workDate)} (${formatWorktime(item.totalWorktime)}) | ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡∏ß‡∏±‡∏ô ${formatThaiDate(purchaseDate)}`;
          } else {
            // ‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            return `‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${paymentModal.employee.employeeName} ‡∏ß‡∏±‡∏ô ${formatThaiDate(item.workDate)} (${formatWorktime(item.totalWorktime)}) | ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡∏ß‡∏±‡∏ô ${formatThaiDate(purchaseDate)} | ‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏¢‡∏≠‡∏î ${unpaidWorkItems.length} ‡∏ß‡∏±‡∏ô ‡∏£‡∏ß‡∏° ${totalAmount} ‡∏ö‡∏≤‡∏ó`;
          }
        })(),
        CreatedBy: authData ? authData.userId : null
      }));

      // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
      await api.post('/cost/UpdateWageCost', workDateItems);
      // alert(JSON.stringify(data));
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á success message
      alert('‚úÖ ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
      closePaymentModal();
      window.location.reload();

    } catch (err) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + (err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ'));
    } finally {
      setPaymentLoading(false);
    }
  };

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á openPaymentModal ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  const openPaymentModal = async (employee) => {
    // ‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    setPaymentModal({
      isOpen: true,
      employee: employee,
      worktime: employee.totalWorktime || 0,
      wageCost: employee.wageCost || 0,
      dateFrom: filterType === "daily" ? selectedDate : dateFrom,
      dateTo: filterType === "daily" ? selectedDate : dateTo
    });

    // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° loading ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API
    setPaymentLoading(true);

    try {
      // // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° filterType
      // const fromDate = new Date(filterType === "daily" ? selectedDate : dateFrom);
      // const toDate = new Date(filterType === "daily" ? selectedDate : dateTo);

      // const workYear = String(fromDate.getFullYear());
      // const workMonth = String(fromDate.getMonth() + 1);
      // const startDay = String(fromDate.getDate());
      // const endDay = String(toDate.getDate());

      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° filterType
      const fromDate = filterType === "daily" ? selectedDate : dateFrom;
      const toDate = filterType === "daily" ? selectedDate : dateTo;
      const response = await api.post('/worktime/GetWorkTimeCostByEmployeeIDandPeriod', {
        EmployeeID: employee.employeeID,
        StartDate: fromDate,
        EndDate: toDate
      });

      const employeeData = response.data;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠ object
      let totalWorktime = 0;
      let wageCost = 0;

      if (Array.isArray(employeeData) && employeeData.length > 0) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        totalWorktime = employeeData.reduce((sum, item) => sum + (item.totalWorktime || 0), 0);
        wageCost = employeeData.reduce((sum, item) => sum + (item.wageCost || 0), 0);
      } else if (employeeData && typeof employeeData === 'object') {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        totalWorktime = employeeData.totalWorktime || 0;
        wageCost = employeeData.wageCost || 0;
      }
      setPaidWorktimes(employeeData.worktimes || []);
      // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô modal
      setPaymentModal(prev => ({
        ...prev,
        worktime: totalWorktime,
        wageCost: wageCost
      }));

    } catch (err) {
      console.error('Error loading payment data:', err);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á error ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      setPaymentLoading(false);
    }
  };

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á recalculatePaymentData ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á parameter ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Backend
  const recalculatePaymentData = async (employeeID, dateFrom, dateTo) => {
    try {
      setPaymentLoading(true);

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      // const fromDate = new Date(dateFrom);
      // const toDate = new Date(dateTo);

      // const workYear = String(fromDate.getFullYear());
      // const workMonth = String(fromDate.getMonth() + 1);
      // const startDay = String(fromDate.getDate());
      // const endDay = String(toDate.getDate());

      const response = await api.post('/worktime/GetWorkTimeCostByEmployeeIDandPeriod', {
        EmployeeID: employeeID,
        // WorkYear: workYear,
        // WorkMonth: workMonth,
        StartDate: dateFrom,
        EndDate: dateTo
      });

      const employeeData = response.data;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠ object
      let totalWorktime = 0;
      let wageCost = 0;

      if (Array.isArray(employeeData) && employeeData.length > 0) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        totalWorktime = employeeData.reduce((sum, item) => sum + (item.totalWorktime || 0), 0);
        wageCost = employeeData.reduce((sum, item) => sum + (item.wageCost || 0), 0);
      } else if (employeeData && typeof employeeData === 'object') {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        totalWorktime = employeeData.totalWorktime || 0;
        wageCost = employeeData.wageCost || 0;
      }

      // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢
      setPaidWorktimes(employeeData.worktimes || []);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô modal
      setPaymentModal(prev => ({
        ...prev,
        worktime: totalWorktime,
        wageCost: wageCost
      }));

    } catch (err) {
      console.error('Error recalculating payment data:', err);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô 0
      setPaymentModal(prev => ({
        ...prev,
        worktime: 0,
        wageCost: 0
      }));
      // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï paidWorktimes ‡∏î‡πâ‡∏ß‡∏¢
      setPaidWorktimes([]);
    } finally {
      setPaymentLoading(false);
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  const renderPaidWorktimesList = () => {
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    const filteredPaidWorktimes = paidWorktimes.filter(item =>
      item.employeeID === paymentModal.employee?.employeeID
    );

    if (filteredPaidWorktimes.length === 0) {
      return (
        <div className="text-center text-base-content/60 py-2">
          <span className="text-2xl">üíº</span>
          <p className="text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ</p>
        </div>
      );
    }

    return filteredPaidWorktimes.map((item, index) => (
      <div key={index} className="bg-base-100 p-2 rounded border border-base-300">
        <div className="flex justify-between items-start">
          <div className="flex-1">
            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏° isPurchase */}
            {item.isPurchase ? (
              <div className="font-semibold text-sm text-success">
                ‚úÖ ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
              </div>
            ) : (
              <div className="font-semibold text-sm text-warning">
                ‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢
              </div>
            )}
            <div className="text-xs text-base-content/70 mb-1">
              üìÖ ‡∏ß‡∏±‡∏ô: {formatThaiDate(item.workDate) || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
            </div>
            {/* ‡∏¢‡πâ‡∏≤‡∏¢ wageCost ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
            <div className={`font-bold text-sm ${item.isPurchase ? 'text-success' : 'text-warning'}`}>
              üí∞ {formatCurrency(item.wageCost || 0)}
            </div>
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏≤‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß */}
            {item.isPurchase && item.purchaseDate && (
              <div className="text-xs text-success/70 mt-1">
                üí≥ ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(item.purchaseDate).toLocaleDateString('th-TH')}
              </div>
            )}
          </div>
          <div className="text-right flex-shrink-0 ml-2">
            {/* ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô */}
            <div className="text-xs text-base-content/70 mb-1">
              ‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {formatWorktime(item.totalWorktime || 0)}
            </div>
            <div className="text-xs text-success">
              ‚¨áÔ∏è {item.timeClockIn || '-'}
            </div>
            <div className="text-xs text-error">
              ‚¨ÜÔ∏è {item.timeClockOut || '-'}
            </div>
          </div>
        </div>
      </div>
    ));
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô modal
  const handleSelectDateChange = (newSelectDate) => {
    setPaymentModal(prev => ({ ...prev, dateFrom: newSelectDate, dateTo: newSelectDate }));

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
    if (newSelectDate && paymentModal.employee?.employeeID) {
      recalculatePaymentData(paymentModal.employee.employeeID, newSelectDate, newSelectDate);
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô modal
  const handleDateFromChange = (newDateFrom) => {
    setPaymentModal(prev => ({ ...prev, dateFrom: newDateFrom }));

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
    if (newDateFrom && paymentModal.dateTo && paymentModal.employee?.employeeID) {
      recalculatePaymentData(paymentModal.employee.employeeID, newDateFrom, paymentModal.dateTo);
    }
  };

  const handleDateToChange = (newDateTo) => {
    setPaymentModal(prev => ({ ...prev, dateTo: newDateTo }));

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
    if (paymentModal.dateFrom && newDateTo && paymentModal.employee?.employeeID) {
      recalculatePaymentData(paymentModal.employee.employeeID, paymentModal.dateFrom, newDateTo);
    }
  };
  const unpaidDaysInfo = React.useMemo(() => {
    if (!paymentModal.employee?.employeeID) {
      return { count: 0, days: [] };
    }

    const unpaidDays = paidWorktimes.filter(item =>
      item.employeeID === paymentModal.employee.employeeID &&
      !item.isPurchase &&
      item.totalWorktime > 0
    );

    return {
      count: unpaidDays.length,
      days: unpaidDays
    };
  }, [paidWorktimes, paymentModal.employee?.employeeID]);


  // ‚úÖ NOW the conditional return comes AFTER all hooks
  if (selectedEmployee) {
    return (
      <EmployeeDetailWorktime
        employee={selectedEmployee}
        onBack={() => setSelectedEmployee(null)}
      />
    );
  }

  return (
    <div className="min-h-screen bg-base-200 flex flex-col items-center px-2 py-4 sm:px-4 sm:py-6">
      <div className="w-full max-w-lg md:max-w-2xl lg:max-w-4xl card bg-base-100 shadow-xl p-3 sm:p-6">
        <h1 className="text-xl sm:text-2xl font-bold text-primary mb-4 text-center">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô</h1>
        <section>
          {/* ‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏±‡∏ö ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô */}
          <div className="mb-4 flex flex-col sm:flex-row items-center gap-2 justify-center">
            <label className="font-semibold">‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö:</label>
            <div className="flex items-center gap-2">
              <span className="">‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</span>
              <input
                type="checkbox"
                className="toggle toggle-primary"
                checked={filterType === "daily"}
                onChange={e => setFilterType(e.target.checked ? "daily" : "period")}
              />
              <span className="">‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</span>
            </div>
          </div>

          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á date range picker ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ */}
          {filterType === "period" && (
            <div className="mb-4 space-y-3">
              <div className="flex flex-col sm:flex-row items-center gap-2 justify-center">
                <label className="font-semibold">‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</label>
                <input
                  type="date"
                  value={dateFrom}
                  onChange={e => setDateFrom(e.target.value)}
                  className="input input-bordered input-sm w-full sm:w-auto"
                />
              </div>
              <div className="flex flex-col sm:flex-row items-center gap-2 justify-center">
                <label className="font-semibold">‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</label>
                <input
                  type="date"
                  value={dateTo}
                  onChange={e => setDateTo(e.target.value)}
                  min={dateFrom} // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ dateFrom
                  className="input input-bordered input-sm w-full sm:w-auto"
                />
              </div>
            </div>
          )}

          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á single date picker ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô */}
          {filterType === "daily" && (
            <div className="mb-4 flex flex-col sm:flex-row items-center gap-2 justify-center">
              <label className="font-semibold">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô:</label>
              <input
                type="date"
                value={selectedDate}
                onChange={e => setSelectedDate(e.target.value)}
                className="input input-bordered input-sm w-full sm:w-auto"
              />
            </div>
          )}

          {/* ‚úÖ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ */}
          <div className="mb-2 text-base-content/70 text-center text-sm">
            {filterType === "period"
              ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏±‡πâ‡∏ô"
              : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô"}
          </div>

          {/* ‚úÖ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin */}
          {authData?.userPermissionId === 1 && (
            <WageCostSummary
              filterType={filterType}
              dateFrom={dateFrom}
              dateTo={dateTo}
              selectedDate={selectedDate}
              data={data}
              formatCurrency={formatCurrency}
            />
          )}

          {loading ? (
            <div className="flex flex-col items-center justify-center py-8">
              <span className="loading loading-spinner loading-lg text-primary"></span>
              <span className="mt-2 sm:ml-4">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Ä¶</span>
            </div>
          ) : error ? (
            <div className="alert alert-error shadow-lg mb-4">
              <span>{error}</span>
            </div>
          ) : (
            <div className="flex flex-col gap-3 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-4">
              {data.length === 0 ? (
                <div className="text-center py-8 text-base-content/60 md:col-span-2 lg:col-span-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
              ) : (
                data.map((item, idx) => (
                  <div key={idx} className="card bg-gradient-to-r from-base-100 to-base-200 shadow-lg hover:shadow-xl transition-all duration-300 border border-base-300 p-4">
                    <div>
                      {/* ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ */}
                      <div
                        className="font-bold text-lg md:text-xl text-primary mb-3 cursor-pointer hover:underline hover:text-primary-focus transition-colors flex items-center gap-2"
                        onClick={() => setSelectedEmployee({
                          employeeID: item.employeeID,
                          employeeName: item.employeeName
                        })}
                        title="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
                      >
                        <span className="text-2xl">üë§</span>
                        <span>{item.employeeName || '-'}</span>
                      </div>

                      {/* ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö layout ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                      <div className="space-y-3">
                        <div className="bg-base-100 p-3 rounded-lg shadow-sm"
                          onClick={() => setSelectedEmployee({
                            employeeID: item.employeeID,
                            employeeName: item.employeeName
                          })}>
                          <div className="flex items-center gap-2 mb-1">
                            <span className="text-lg">‚è±Ô∏è</span>
                            <span className="font-semibold text-base-content/80">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</span>
                          </div>
                          <div className="text-lg font-bold text-primary">
                            {item.totalWorktime ? formatWorktime(item.totalWorktime) : '-'}
                          </div>
                        </div>
                        {authData?.userPermissionId === 1 && (
                          <div className="bg-base-100 p-3 rounded-lg shadow-sm">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="text-lg">üí∞</span>
                              <span className="font-semibold text-base-content/80">‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô / ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á</span>
                            </div>

                            {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤ */}
                            <div className="flex items-center justify-between">
                              <div className="text-lg font-bold text-success">
                                {item.wageCost ? formatCurrency(item.wageCost) : '-'}
                              </div>
                              /
                              <div className="text-lg font-bold text-warning">
                                {item.wageCost ? formatCurrency(item.wageCostNoPurchase) : '-'}
                              </div>

                              {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤ */}

                              <button
                                className="btn btn-md btn-success"
                                onClick={() => openPaymentModal(item)}
                                disabled={!item.wageCost || item.wageCost <= 0}
                              >
                                üí≥ ‡∏à‡πà‡∏≤‡∏¢
                              </button>

                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          )}
        </section>
      </div>

      {/* ‚úÖ Confirm Modal */}
      {confirmModal.isOpen && (
        <div className="modal modal-open">
          <div className="modal-box max-w-md">
            <h3 className="font-bold text-lg mb-4">{confirmModal.title}</h3>
            {confirmModal.content}
            <div className="modal-action">
              <button
                className="btn btn-error"
                onClick={handleCancel}
              >
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                className="btn btn-success"
                onClick={handleConfirm}
              >
                ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‚úÖ Payment Modal - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ Confirm Modal ‡∏õ‡∏¥‡∏î */}
      {paymentModal.isOpen && !confirmModal.isOpen && (
        <div className="modal modal-open">
          <div className="modal-box max-w-md">
            <h3 className="font-bold text-lg mb-4">üí≥ ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô</h3>

            {/* ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô */}
            <div className="bg-base-200 p-3 rounded-lg mb-4">
              <div className="font-semibold text-primary">
                üë§ {paymentModal.employee?.employeeName || '-'}
              </div>
            </div>

            {/* ‚úÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */}
            <div className="form-control mb-4">
              <label className="label">
                <span className="label-text font-semibold">
                  {filterType === "daily" ? "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" : "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤"}
                </span>
              </label>
              {filterType === "daily" ? (
                // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
                <input
                  type="date"
                  value={paymentModal.dateFrom}
                  onChange={(e) => {
                    const selectedDate = e.target.value;
                    handleSelectDateChange(selectedDate);
                  }}
                  className="input input-bordered input-sm"
                  disabled={paymentLoading}
                />
              ) : (
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                <div className="flex gap-2">
                  <input
                    type="date"
                    value={paymentModal.dateFrom}
                    onChange={(e) => handleDateFromChange(e.target.value)}
                    className="input input-bordered input-sm flex-1"
                    disabled={paymentLoading}
                  />
                  <span className="self-center">‡∏ñ‡∏∂‡∏á</span>
                  <input
                    type="date"
                    value={paymentModal.dateTo}
                    onChange={(e) => handleDateToChange(e.target.value)}
                    min={paymentModal.dateFrom} // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ dateFrom
                    className="input input-bordered input-sm flex-1"
                    disabled={paymentLoading}
                  />
                </div>
              )}
              {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì */}
              {paymentLoading && (
                <div className="label">
                  <span className="label-text-alt text-info flex items-center gap-1"></span>
                  <span className="loading loading-spinner loading-xs">
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà...
                  </span>
                </div>
              )}
            </div>

            {/* ‚úÖ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */}
            <div className="form-control mb-4">
              <label className="label">
                <span className="label-text font-semibold">‚è±Ô∏è ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</span>
              </label>
              <div className="bg-base-200 p-3 rounded-lg">
                <div className="text-lg font-bold text-primary flex justify-between items-center">
                  {paymentLoading ? (
                    <span className="flex items-center gap-2">
                      <span className="loading loading-spinner loading-sm"></span>
                      ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà...
                    </span>
                  ) : (
                    <>
                      <span>{formatWorktime(paymentModal.worktime)}</span>
                      <span className="text-sm">‡∏à‡∏≤‡∏Å {unpaidDaysInfo.count} ‡∏ß‡∏±‡∏ô (‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢)</span>
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */}
            <div className="form-control mb-6">
              <label className="label">
                <span className="label-text font-semibold">üí∞ ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á</span>
              </label>
              <input
                type="number"
                step="0.01"
                value={paymentModal.wageCost}
                onChange={(e) => setPaymentModal(prev => ({ ...prev, wageCost: parseFloat(e.target.value) || 0 }))}
                className="input input-bordered"
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
                disabled={paymentLoading}
              />
              <div className="label">
                <span className="label-text-alt text-success font-semibold">
                  {paymentLoading ? '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà...' : formatCurrency(paymentModal.wageCost)}
                </span>
              </div>
            </div>



            {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ */}
            <div className="modal-action">
              <button
                className="btn btn-error"
                onClick={closePaymentModal}
                disabled={paymentLoading}
              >
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                className="btn btn-success"
                onClick={confirmPayment}
                disabled={paymentLoading || !paymentModal.wageCost || paymentModal.wageCost <= 0}
              >
                {paymentLoading ? (
                  <>
                    <span className="loading loading-spinner loading-sm"></span>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡πà‡∏≤‡∏¢...
                  </>
                ) : (
                  <>
                    üí≥ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
                  </>
                )}
              </button>
            </div>
            <hr className="my-4" />
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß */}
            <div className="form-control mb-4">
              <label className="label">
                <span className="label-text font-semibold">üìÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
              </label>
              <div className="bg-base-200 p-3 rounded-lg">
                {paymentLoading ? (
                  <span className="flex items-center gap-2">
                    <span className="loading loading-spinner loading-sm"></span>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô...
                  </span>
                ) : (
                  <div className="space-y-2">
                    {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß */}
                    {renderPaidWorktimesList()}

                    {/* ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß */}
                    {(() => {
                      // ‡πÉ‡∏ä‡πâ paidWorktimes ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å API ‡πÅ‡∏ó‡∏ô data ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                      const paidItems = paidWorktimes.filter(item =>
                        item.employeeID === paymentModal.employee?.employeeID &&
                        item.isPurchase === true
                      );

                      if (paidItems.length === 0) return null;

                      const totalPaidAmount = paidItems.reduce((sum, item) => sum + (item.wageCost || 0), 0);
                      const totalPaidHours = paidItems.reduce((sum, item) => sum + (item.totalWorktime || 0), 0);

                      return (
                        <div className="mt-3 pt-3 border-t border-base-300">
                          <div className="flex justify-between items-center">
                            <div>
                              <div className="font-semibold text-sm text-info">
                                üìä ‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                              </div>
                              <div className="text-xs text-base-content/70">
                                {paidItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="font-bold text-info text-sm">
                                {formatCurrency(totalPaidAmount)}
                              </div>
                              <div className="text-xs text-base-content/60">
                                {formatWorktime(totalPaidHours)}
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })()}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// ‚úÖ WageCostSummary Component ‡πÅ‡∏ö‡∏ö Minimal
function WageCostSummary({ filterType, dateFrom, dateTo,  data, formatCurrency }) {
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const totalCost = data.reduce((sum, item) => sum + (item.wageCost || 0), 0);
  const totalUnpaidCost = data.reduce((sum, item) => sum + (item.wageCostNoPurchase || 0), 0);
  const totalPaidCost = totalCost - totalUnpaidCost;
  const totalEmployees = data.filter(item => item.totalWorktime > 0).length;

  return (
    <div className="mb-4 bg-info/5 rounded-lg border border-info/10 p-3">
      {/* ‚úÖ Header ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö */}
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center gap-2">
          <span className="text-lg">üí∏</span>
          <span className="font-bold text-primary text-sm">‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á</span>
        </div>
        <div className="text-xs text-primary/60 bg-primary/10 px-2 py-1 rounded-full">
          {filterType === "period"
            ? `${(() => {
                const start = new Date(dateFrom);
                const end = new Date(dateTo);
                const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;
                return `${days} ‡∏ß‡∏±‡∏ô`;
              })()} | ${totalEmployees} ‡∏Ñ‡∏ô`
            : `1 ‡∏ß‡∏±‡∏ô | ${totalEmployees} ‡∏Ñ‡∏ô`
          }
        </div>
      </div>

      {/* ‚úÖ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö Horizontal */}
      <div className="flex items-center justify-between text-sm">
        {/* ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° */}
        <div className="text-center">
          <div className="text-xs text-primary/70">‡∏£‡∏ß‡∏°</div>
          <div className="font-bold text-primary">
            {totalCost > 0 ? formatCurrency(totalCost).replace('‡∏ø', '‡∏ø') : '‡∏ø0'}
          </div>
        </div>

        {/* ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢ */}
        <div className="text-center">
          <div className="text-xs text-warning/70">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢</div>
          <div className="font-bold text-warning">
            {totalUnpaidCost > 0 ? formatCurrency(totalUnpaidCost).replace('‡∏ø', '‡∏ø') : '‡∏ø0'}
          </div>
        </div>

        {/* ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß */}
        <div className="text-center">
          <div className="text-xs text-success/70">‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß</div>
          <div className="font-bold text-success">
            {totalPaidCost > 0 ? formatCurrency(totalPaidCost).replace('‡∏ø', '‡∏ø') : '‡∏ø0'}
          </div>
        </div>

      </div>
    </div>
  );
}

const Worktime = () => {
  const [authData, setAuthData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const raw = Cookies.get("authData");
    if (raw) {
      try {
        setAuthData(JSON.parse(raw));
      } catch {
        setAuthData(null);
      }
    }
    setLoading(false);
  }, []);

  if (loading) {
    return <div className="p-8 text-center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‚Ä¶</div>;
  }
  if (!authData || !authData.userId) {
    window.location.href = '/';
    return null;
  }
  if (authData.userPermissionId !== 3) {
    return <ManagementWorktime />;
  }
  return <StaffWorktime />;
};

export default Worktime;