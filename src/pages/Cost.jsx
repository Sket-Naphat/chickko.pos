import ThemeToggle from "../components/ThemeToggle";
import ModalNewCost from "../components/cost/ModalNewCost";
import { useState, useEffect, useRef } from "react";
import { api } from "../lib/api";
import ModalConfirmPayment from "../components/cost/ModalConfirmPayment";
import Toast from "../components/ui/Toast";
import { useNavigate } from "react-router-dom";
/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô React Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å API ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á /api/GetCostList
 * - ‡∏´‡∏≤‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."
 * - ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á"
 * - ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
 *
 * @returns {JSX.Element} ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö React ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
 */

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á

function GetCostNoPurchase({ refreshKey, onConfirm, showToast }) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î

  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [deleteModal, setDeleteModal] = useState({ show: false, item: null });
  const [isDeleting, setIsDeleting] = useState(false);
  const navigate = useNavigate();
  const openStockIn = (orderId) => {
    navigate(`/stockin/${orderId}`, { state: { from: '/cost' } });
  };
  const handleConfirm = () => {
    onConfirm?.();
  };

  const handleDeleteClick = (item) => {
    setDeleteModal({ show: true, item });
  };

  const handleDeleteConfirm = async () => {
    setIsDeleting(true);
    try {
      const response = await api.delete(`/cost/DeleteCost/${deleteModal.item.costID}`);
      if (response.data) {
        showToast(response.data, "success");
        handleConfirm(); // refresh data
        setDeleteModal({ show: false, item: null });
      } else {
        showToast("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", "error");
      }
    } catch (error) {
      console.error("Delete error:", error);
      showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", "error");
    } finally {
      setIsDeleting(false);
    }
  };

  const handleDeleteCancel = () => {
    setDeleteModal({ show: false, item: null });
  };
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ loading ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà refreshKey ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
      try {
        const res = await api.post("/cost/GetAllCostList", { IsPurchase: false }); // ‚úÖ path ‡∏ï‡∏≤‡∏° Controller
        const items = res.data ?? [];
        setData(items);
      } catch (err) {
        setData([]);
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [refreshKey]); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å [] ‡πÄ‡∏õ‡πá‡∏ô [refreshKey]

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
  if (loading) {
    return (
      <div className="flex items-center justify-center gap-3 py-12 bg-gradient-to-br from-base-100 to-base-200 rounded-xl border border-base-300">
        <span className="loading loading-dots loading-md text-primary"></span>
        <span className="text-sm md:text-base text-base-content/80 font-medium">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>
      </div>
    );
  }

  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (!data || data.length === 0) {
    return (
      <div className="text-center py-1 bg-gradient-to-br from-base-100 to-base-200 rounded-xl border border-base-300">
        <div className="flex flex-col items-center gap-3">

          <div>
            <div className="text-base font-semibold text-base-content">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á</div>
            <div className="text-sm text-base-content/60">‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</div>
          </div>
        </div>
      </div>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Responsive
  return (
    <>
      {/* Desktop/Tablet Table View (‚â•768px) */}
      <div className="hidden md:block overflow-x-auto">
        <table className="table table-zebra">
          <thead>
            <tr>
              <th className="text-sm lg:text-base">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              <th className="text-sm lg:text-base">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
              <th className="text-sm lg:text-base">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
              <th className="text-right text-sm lg:text-base">‡∏£‡∏≤‡∏Ñ‡∏≤</th>
              <th className="text-sm lg:text-base">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠</th>
              <th className="text-sm lg:text-base">‡∏•‡∏ö</th>
            </tr>
          </thead>
          <tbody>
            {data.map((item, idx) => {
              let badgeClass = "badge-accent";
              switch (item.costCategoryID) {
                case 1:
                  badgeClass = "badge-primary";
                  break;
                case 2:
                  badgeClass = "badge-error";
                  break;
                case 3:
                  badgeClass = "badge-success";
                  break;
                default:
                  badgeClass = "badge-accent";
              }
              return (
                <tr key={item.id || idx} className="hover:bg-base-200">
                  <td>
                    {item.costCategoryID == 1 && item.isStockIn
                      ? <button className="btn btn-sm lg:btn-sm btn-primary text-sm lg:text-sm" onClick={() => openStockIn(item.costID)}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</button>
                      : <ModalConfirmPayment onConfirm={handleConfirm} item={item} showToast={showToast} />}
                  </td>
                  <td className="text-sm lg:text-base">{item.costDate}</td>
                  <td>
                    <span className={`badge ${badgeClass} text-xs lg:text-sm whitespace-nowrap`}>
                      {item.costCategory.description}
                    </span>
                  </td>
                  <td className="text-right font-medium text-sm lg:text-base">{item.costPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td>
                  <td className="text-sm lg:text-base max-w-xs truncate" title={item.costDescription}>{item.costDescription}</td>
                  <td>
                    <button
                      className="btn btn-sm lg:btn-md btn-error text-xs lg:text-sm"
                      onClick={() => handleDeleteClick(item)}
                      title="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                    >
                      üóëÔ∏è ‡∏•‡∏ö
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* Mobile Card View (<768px) */}
      <div className="md:hidden space-y-2">
        {data.map((item, idx) => {
          let badgeClass = "badge-accent";
          switch (item.costCategoryID) {
            case 1:
              badgeClass = "badge-primary";
              break;
            case 2:
              badgeClass = "badge-error";
              break;
            case 3:
              badgeClass = "badge-success";
              break;
            default:
              badgeClass = "badge-accent";
          }

          return (
            <div key={item.id || idx} className="bg-gradient-to-r from-base-100 to-base-50 border-2 border-base-300 hover:border-primary/30 rounded-xl p-3 shadow-md hover:shadow-lg transition-all duration-300">
              {/* Compact Header Row */}
              <div className="flex justify-between items-center mb-2">
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-2 bg-base-200/50 rounded-lg px-2 py-1">
                    <span className="text-xs text-base-content/60">üìÖ</span>
                    <span className="text-sm font-medium">{item.costDate}</span>
                  </div>
                  <span className={`badge ${badgeClass} badge-sm shadow-sm`}>
                    {item.costCategory.description}
                  </span>
                </div>
                <div className="bg-primary/10 rounded-lg px-2 py-1">
                  <span className="font-bold text-sm text-primary">{item.costPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                </div>
              </div>

              {/* Description and Action Row */}
              <div className="flex justify-between items-center gap-2">
                <div className="text-xs text-base-content/80 flex-1 truncate bg-base-200/30 rounded px-2 py-1" title={item.costDescription}>
                  üí¨ {item.costDescription}
                </div>
                <div className="flex-shrink-0 flex gap-2">
                  <button
                    className="btn btn-sm btn-error"
                    onClick={() => handleDeleteClick(item)}
                  >
                    üóëÔ∏è ‡∏•‡∏ö
                  </button>
                  {item.costCategoryID == 1 && item.isStockIn
                    ? <button className="btn btn-sm btn-primary shadow-md hover:shadow-lg whitespace-nowrap transition-all duration-200" onClick={() => openStockIn(item.costID)}>
                      üì¶ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    </button>
                    : <ModalConfirmPayment onConfirm={handleConfirm} item={item} showToast={showToast} />}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Themed Delete Confirmation Modal */}
      {deleteModal.show && (
        <div className="modal modal-open">
          <div className="modal-box bg-gradient-to-br from-base-100 to-base-200 border-2 border-error/30 shadow-2xl">
            {/* Modal Header */}
            <div className="flex items-center gap-3 mb-4">
              <div className="p-3 bg-error/20 rounded-full">
                <span className="text-2xl">üóëÔ∏è</span>
              </div>
              <div>
                <h3 className="font-bold text-lg text-error">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</h3>
                <p className="text-sm text-base-content/70">‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ</p>
              </div>
            </div>

            {/* Modal Content */}
            <div className="bg-base-200/50 rounded-lg p-4 mb-6">
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-base-content/70">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span>
                  <span className="font-medium">{deleteModal.item?.costDate}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-base-content/70">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</span>
                  <span className="badge badge-sm">{deleteModal.item?.costCategory?.description}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-base-content/70">‡∏£‡∏≤‡∏Ñ‡∏≤:</span>
                  <span className="font-bold text-error">{deleteModal.item?.costPrice?.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                </div>
                <div className="pt-2 border-t border-base-300">
                  <span className="text-sm text-base-content/70">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</span>
                  <p className="text-sm mt-1 break-words">{deleteModal.item?.costDescription}</p>
                </div>
              </div>
            </div>

            {/* Modal Actions */}
            <div className="modal-action gap-3">
              <button
                className="btn btn-outline btn-base-content hover:bg-base-200 transition-all duration-200"
                onClick={handleDeleteCancel}
                disabled={isDeleting}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                className="btn btn-error text-error-content shadow-lg hover:shadow-xl transition-all duration-200"
                onClick={handleDeleteConfirm}
                disabled={isDeleting}
              >
                {isDeleting ? (
                  <>
                    <span className="loading loading-spinner loading-sm"></span>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...
                  </>
                ) : (
                  <>
                    üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                  </>
                )}
              </button>
            </div>
          </div>
          <div className="modal-backdrop bg-black/50" onClick={handleDeleteCancel}></div>
        </div>
      )}
    </>
  );
}

const months = [
  "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
  "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
];

const getCurrentMonth = () => new Date().getMonth();
const getCurrentYear = () => new Date().getFullYear();

function GetCostIsPurchaseList({ refreshKey }) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedMonth, setSelectedMonth] = useState(getCurrentMonth());
  const [selectedYear, setSelectedYear] = useState(getCurrentYear());
  const [filterMode, setFilterMode] = useState('month'); // 'month' ‡∏´‡∏£‡∏∑‡∏≠ 'year'

  // Handler functions
  const handleMonthChange = (e) => {
    setSelectedMonth(Number(e.target.value));
  };

  const handleYearChange = (e) => {
    setSelectedYear(Number(e.target.value));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏µ
  const getFilteredData = () => {
    if (filterMode === 'month') {
      return data.filter(item => {
        const date = new Date(item.costDate);
        return (
          date.getMonth() === selectedMonth &&
          date.getFullYear() === selectedYear
        );
      });
    } else {
      return data.filter(item => {
        const date = new Date(item.costDate);
        return date.getFullYear() === selectedYear;
      });
    }
  };

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ loading ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà refreshKey ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
      try {
        const res = await api.post("/cost/GetAllCostList", { IsPurchase: true }); // ‚úÖ path ‡∏ï‡∏≤‡∏° Controller
        const items = res.data ?? [];
        setData(items);
      } catch (err) {
        setData([]);
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [refreshKey]); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å [] ‡πÄ‡∏õ‡πá‡∏ô [refreshKey]

  // Get filtered data
  const filteredData = getFilteredData();

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
  if (loading) {
    return (
      <div className="flex items-center justify-center gap-3 py-12 bg-gradient-to-br from-base-100 to-base-200 rounded-xl border border-base-300">
        <span className="loading loading-dots loading-md text-primary"></span>
        <span className="text-sm md:text-base text-base-content/80 font-medium">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>
      </div>
    );
  }

  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (!data || data.length === 0) {
    return (
      <div className="text-center py-12 bg-gradient-to-br from-base-100 to-base-200 rounded-xl border border-base-300">
        <div className="flex flex-col items-center gap-3">
          <div className="p-4 bg-success/20 rounded-full">
            <span className="text-4xl">‚úÖ</span>
          </div>
          <div>
            <div className="text-base font-semibold text-base-content">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß</div>
            <div className="text-sm text-base-content/60">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</div>
          </div>
        </div>
      </div>
    );
  }

  // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (filteredData.length === 0) {
    return (
      <>
        {/* Compact Filter Controls */}
        <div className="bg-base-100 rounded-lg border border-base-300 p-3 mb-3">
          <div className="flex flex-wrap items-center gap-2 text-sm">
            <span className="text-base-content/80 font-medium">üóìÔ∏è ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</span>

            <select
              className="select select-sm select-bordered min-w-0 w-24"
              value={selectedMonth}
              onChange={handleMonthChange}
              disabled={filterMode === 'year'}
            >
              {months.map((m, idx) => (
                <option key={m} value={idx}>
                  {m}
                </option>
              ))}
            </select>

            <select
              className="select select-sm select-bordered min-w-0 w-20"
              value={selectedYear}
              onChange={handleYearChange}
            >
              {[...new Set(data.map(item => new Date(item.costDate).getFullYear()))]
                .filter((v, i, arr) => arr.indexOf(v) === i)
                .sort((a, b) => b - a)
                .map((y) => (
                  <option key={y} value={y}>
                    {y}
                  </option>
                ))}
            </select>

            <label className="flex cursor-pointer items-center gap-1">
              <input
                type="checkbox"
                className="toggle toggle-xs toggle-success"
                checked={filterMode === 'year'}
                onChange={() => setFilterMode(filterMode === 'month' ? 'year' : 'month')}
              />
              <span className="text-xs">{filterMode === 'year' ? '‡∏£‡∏≤‡∏¢‡∏õ‡∏µ' : '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'}</span>
            </label>

            <div className="ml-auto flex items-center gap-2 text-xs text-base-content/60">
              <span className="badge badge-xs badge-outline">
                0/{data.length}
              </span>
            </div>
          </div>
        </div>

        <div className="text-center py-8 bg-gradient-to-br from-base-100 to-base-200 rounded-xl border border-base-300">
          <div className="flex flex-col items-center gap-3">
            <div className="p-3 bg-warning/20 rounded-full">
              <span className="text-3xl">üìÖ</span>
            </div>
            <div>
              <div className="text-base font-semibold text-base-content">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</div>
              <div className="text-sm text-base-content/60">‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô</div>
            </div>
          </div>
        </div>
      </>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Responsive
  return (
    <>
      {/* Compact Filter Controls */}
      <div className="bg-base-100 rounded-lg border border-base-300 p-3 mb-3">
        <div className="flex flex-wrap items-center gap-2 text-sm">
          <span className="text-base-content/80 font-medium">üóìÔ∏è ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</span>

          <select
            className="select select-sm select-bordered min-w-0 w-24"
            value={selectedMonth}
            onChange={handleMonthChange}
            disabled={filterMode === 'year'}
          >
            {months.map((m, idx) => (
              <option key={m} value={idx}>
                {m}
              </option>
            ))}
          </select>

          <select
            className="select select-sm select-bordered min-w-0 w-20"
            value={selectedYear}
            onChange={handleYearChange}
          >
            {[...new Set(data.map(item => new Date(item.costDate).getFullYear()))]
              .filter((v, i, arr) => arr.indexOf(v) === i)
              .sort((a, b) => b - a)
              .map((y) => (
                <option key={y} value={y}>
                  {y}
                </option>
              ))}
          </select>

          <label className="flex cursor-pointer items-center gap-1">
            <input
              type="checkbox"
              className="toggle toggle-xs toggle-success"
              checked={filterMode === 'year'}
              onChange={() => setFilterMode(filterMode === 'month' ? 'year' : 'month')}
            />
            <span className="text-xs">{filterMode === 'year' ? '‡∏£‡∏≤‡∏¢‡∏õ‡∏µ' : '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'}</span>
          </label>


        </div>
      </div>


      {/* Summary Cards */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
        {/* Total Amount Card */}
        <div className="stat bg-gradient-to-br from-primary/10 to-primary/5 border border-primary/20 rounded-xl p-3 shadow-sm">
          <div className="stat-figure text-primary opacity-20">
            <span className="text-2xl">üí∞</span>
          </div>
          <div className="stat-title text-xs text-primary/70">‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°</div>
          <div className="stat-value text-base md:text-lg font-bold text-primary">
            {filteredData.reduce((acc, item) => acc + item.costPrice, 0).toLocaleString()}
          </div>
          <div className="stat-desc text-xs text-primary/60">‡∏ö‡∏≤‡∏ó</div>
        </div>

        {/* Total Items Card */}
        <div className="stat bg-gradient-to-br from-info/10 to-info/5 border border-info/20 rounded-xl p-3 shadow-sm">
          <div className="stat-figure text-info opacity-20">
            <span className="text-2xl">üìä</span>
          </div>
          <div className="stat-title text-xs text-info/70">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
          <div className="stat-value text-base md:text-lg font-bold text-info">
            {filteredData.length}
          </div>
          <div className="stat-desc text-xs text-info/60">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
        </div>

        {/* Category Breakdown Cards */}
        {(() => {
          const categoryStats = filteredData.reduce((acc, item) => {
            const categoryID = item.costCategoryID;
            const categoryName = item.costCategory?.description || '‡∏≠‡∏∑‡πà‡∏ô‡πÜ';

            if (!acc[categoryID]) {
              acc[categoryID] = {
                name: categoryName,
                total: 0,
                count: 0,
                color: categoryID === 1 ? 'success' : categoryID === 2 ? 'error' : categoryID === 3 ? 'warning' : 'accent'
              };
            }
            acc[categoryID].total += item.costPrice;
            acc[categoryID].count += 1;
            return acc;
          }, {});

          const sortedCategories = Object.entries(categoryStats)
            .sort(([, a], [, b]) => b.total - a.total)
            .slice(0, 2); // Show top 2 categories

          return sortedCategories.map(([categoryID, stats]) => (
            <div key={categoryID} className={`stat bg-gradient-to-br from-${stats.color}/10 to-${stats.color}/5 border border-${stats.color}/20 rounded-xl p-3 shadow-sm`}>
              <div className={`stat-figure text-${stats.color} opacity-20`}>
                <span className="text-2xl">
                  {categoryID === '1' ? 'üõí' : categoryID === '2' ? 'üè†' : categoryID === '3' ? '‚ö°' : 'üì¶'}
                </span>
              </div>
              <div className={`stat-title text-xs text-${stats.color}/70 truncate`} title={stats.name}>
                {stats.name}
              </div>
              <div className={`stat-value text-base md:text-lg font-bold text-${stats.color}`}>
                {stats.total.toLocaleString()}
              </div>
              <div className={`stat-desc text-xs text-${stats.color}/60`}>
                {stats.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </div>
            </div>
          ));
        })()}
      </div>

      {/* Detailed Category Breakdown */}
      {filteredData.length > 0 && (
        <div className="bg-base-100 rounded-lg border border-base-300 p-3 mb-3">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-sm font-semibold text-base-content flex items-center gap-2">
              <span>üìà</span>
              <span>‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</span>
            </h3>
            <div className="text-xs text-base-content/60">
              {filterMode === 'month'
                ? `${months[selectedMonth]} ${selectedYear}`
                : `‡∏õ‡∏µ ${selectedYear}`
              }
            </div>
          </div>

          <div className="space-y-2">
            {(() => {
              const categoryStats = filteredData.reduce((acc, item) => {
                const categoryID = item.costCategoryID;
                const categoryName = item.costCategory?.description || '‡∏≠‡∏∑‡πà‡∏ô‡πÜ';

                if (!acc[categoryID]) {
                  acc[categoryID] = {
                    name: categoryName,
                    total: 0,
                    count: 0,
                    color: categoryID === 1 ? 'primary' : categoryID === 2 ? 'error' : categoryID === 3 ? 'success' : 'accent'
                  };
                }
                acc[categoryID].total += item.costPrice;
                acc[categoryID].count += 1;
                return acc;
              }, {});

              const totalAmount = filteredData.reduce((acc, item) => acc + item.costPrice, 0);

              return Object.entries(categoryStats)
                .sort(([, a], [, b]) => b.total - a.total)
                .map(([categoryID, stats]) => {
                  const percentage = totalAmount > 0 ? (stats.total / totalAmount * 100) : 0;

                  return (
                    <div key={categoryID} className="flex items-center justify-between p-2 bg-base-50 rounded-lg">
                      <div className="flex items-center gap-2 flex-1">
                        <span className="text-sm">
                          {categoryID === '1' ? 'üõí' : categoryID === '2' ? 'üè†' : categoryID === '3' ? '‚ö°' : 'üì¶'}
                        </span>
                        <div className="flex-1">
                          <div className="text-sm font-medium text-base-content">{stats.name}</div>
                          <div className="text-xs text-base-content/60">{stats.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-sm font-bold text-base-content">
                          {stats.total.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                        </div>
                        <div className="text-xs text-base-content/60">
                          {percentage.toFixed(1)}%
                        </div>
                      </div>
                    </div>
                  );
                });
            })()}
          </div>
        </div>
      )}

      {/* Desktop/Tablet Table View (‚â•768px) */}
      <div className="hidden md:block overflow-x-auto">
        <table className="table table-zebra">
          <thead>
            <tr>
              <th className="text-sm lg:text-base">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
              <th className="text-sm lg:text-base">üè∑Ô∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
              <th className="text-right text-sm lg:text-base">üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤</th>
              <th className="text-sm lg:text-base">üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠</th>
            </tr>
          </thead>
          <tbody>
            {filteredData.map((item, idx) => (
              <tr key={item.id || idx} className="hover:bg-base-200">
                <td className="text-sm lg:text-base">{item.costDate}</td>
                <td className="text-sm lg:text-base">
                  <span className="badge badge-success text-xs lg:text-sm whitespace-nowrap">
                    {item.costCategory.description}
                  </span>
                </td>
                <td className="text-right font-medium text-sm lg:text-base">{item.costPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td>
                <td className="text-sm lg:text-base max-w-xs truncate" title={item.costDescription}>{item.costDescription}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Mobile Card View (<768px) */}
      <div className="md:hidden space-y-2">
        <div className="ml-auto flex items-center gap-2 text-xs text-base-success/60">
          <span className="badge badge-xs badge-outline">
            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {filteredData.length}/{data.length}
          </span>
        </div>
        {filteredData.map((item, idx) => (
          <div key={item.id || idx} className="bg-gradient-to-r from-base-100 to-base-50 border-2 border-base-300 hover:border-success/30 rounded-xl p-3 shadow-md hover:shadow-lg transition-all duration-300">
            {/* Compact Header Row */}
            <div className="flex justify-between items-center mb-2">
              <div className="flex items-center gap-2">
                <div className="flex items-center gap-2 bg-base-200/50 rounded-lg px-2 py-1">
                  <span className="text-xs text-base-content/60">üìÖ</span>
                  <span className="text-sm font-medium">{item.costDate}</span>
                </div>
                <span className="badge badge-success badge-sm shadow-sm whitespace-nowrap">
                  {item.costCategory.description}
                </span>
              </div>
              <div className="bg-success/10 rounded-lg px-2 py-1">
                <span className="font-bold text-sm text-success">{item.costPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
              </div>
            </div>

            {/* Description Row */}
            <div className="text-xs text-base-content/80 truncate bg-base-200/30 rounded px-2 py-1" title={item.costDescription}>
              üí¨ {item.costDescription}
            </div>
          </div>
        ))}
      </div>
    </>
  );
}
export default function Cost() {
  const [toast, setToast] = useState({ show: false, message: "", type: "success" });
  const hideTimer = useRef(null);

  const showToast = (message, type = "success", duration = 2000) => {
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå timer ‡πÄ‡∏î‡∏¥‡∏° (‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡∏ö)
    if (hideTimer.current) clearTimeout(hideTimer.current);
    setToast({ show: true, message, type });
    hideTimer.current = setTimeout(() => setToast((t) => ({ ...t, show: false })), duration);
  };

  const [refreshKey, setRefreshKey] = useState(0);

  const refreshData = () => {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    setRefreshKey((prev) => prev + 1);
  }

  return (
    <div className="p-2 md:p-4 space-y-2 md:space-y-3 max-w-7xl mx-auto">
      {/* Global Toast */}
      <Toast show={toast.show} message={toast.message} type={toast.type} position="bottom-center" />

      {/* Header Section */}
      <div className="bg-gradient-to-r from-accent/10 to-secondary/10 backdrop-blur-sm border border-accent/20 rounded-xl p-2 md:p-3 shadow-lg">
        <div className="flex items-center justify-between gap-3">
          <div className="flex items-center gap-2">
            <div className="p-1.5 bg-accent/20 rounded-lg">
              <span className="text-xl">üí∞</span>
            </div>
            <div>
              <h1 className="text-base md:text-lg font-bold text-primary">
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
              </h1>
              <p className="text-xs text-base-content/70 hidden sm:block">
                ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
              </p>
            </div>
          </div>
          <div className="flex-shrink-0">
            <ModalNewCost onCreated={refreshData} showToast={showToast} />
          </div>
        </div>
      </div>

      {/* Unpaid Expenses Card */}
      <div className="card bg-base-100 shadow-xl border-2 border-error/30 hover:border-error/50 transition-all duration-300 rounded-xl overflow-hidden">
        <div className="card-header bg-gradient-to-r from-error/10 to-error/5 border-b border-error/20 p-2 md:p-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="p-1.5 bg-error/20 rounded-lg">
                <span className="text-base">‚ö†Ô∏è</span>
              </div>
              <div>
                <h2 className="text-sm md:text-base font-bold text-error">
                  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                </h2>
                <p className="text-xs text-error/70 hidden sm:block">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
              </div>
            </div>
            <div className="badge badge-error badge-sm shadow-md">
              <span className="text-xs font-medium">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</span>
            </div>
          </div>
        </div>
        <div className="card-body p-3 md:p-4 bg-gradient-to-b from-base-100 to-base-50">
          <GetCostNoPurchase refreshKey={refreshKey} onConfirm={refreshData} showToast={showToast} />
        </div>
      </div>

      {/* Paid Expenses Card */}
      <div className="card bg-base-100 shadow-xl border-2 border-success/30 hover:border-success/50 transition-all duration-300 rounded-xl overflow-hidden">
        <div className="card-header bg-gradient-to-r from-success/10 to-success/5 border-b border-success/20 p-2 md:p-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="p-1.5 bg-success/20 rounded-lg">
                <span className="text-base">‚úÖ</span>
              </div>
              <div>
                <h2 className="text-sm md:text-base font-bold text-success">
                  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                </h2>
                <p className="text-xs text-success/70 hidden sm:block">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>
              </div>
            </div>
            <div className="badge badge-success badge-sm shadow-md">
              <span className="text-xs font-medium">‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß</span>
            </div>
          </div>
        </div>
        <div className="card-body p-3 md:p-4 bg-gradient-to-b from-base-100 to-base-50">
          <GetCostIsPurchaseList refreshKey={refreshKey} />
        </div>
      </div>
    </div>
  );
}
