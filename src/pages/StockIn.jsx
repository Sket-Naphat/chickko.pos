// src/pages/CheckStockDetail.jsx
import { useEffect, useState, useMemo, Fragment } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { api } from "../lib/api";
import Cookies from "js-cookie";

export default function StockInDetail() {
    const { orderId } = useParams(); // "new" ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç id ‡∏à‡∏£‡∏¥‡∏á
    const authData = Cookies.get("authData") ? JSON.parse(Cookies.get("authData")) : null;
    const [loading, setLoading] = useState(true);
    const [items, setItems] = useState([]); // [{id, name, qty: string}]
    const [modifiedIds, setModifiedIds] = useState([]);
    const [invalidIds, setInvalidIds] = useState([]); // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà qty ‡∏ß‡πà‡∏≤‡∏á/‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const [errorMsg, setErrorMsg] = useState("");
    const [isSaving, setIsSaving] = useState(false);
    const [showZeroItems, setShowZeroItems] = useState(false); // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ stockInQTY <= 0
    const [zeroItems, setZeroItems] = useState([]); // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ stockInQTY <= 0
    const navigate = useNavigate();
    // helper: ‡∏Ñ‡∏∑‡∏ô yyyy-MM-dd ‡πÅ‡∏ö‡∏ö local (‡πÑ‡∏°‡πà‡∏Ñ‡∏•‡∏≤‡∏î‡∏ß‡∏±‡∏ô)
    const todayLocal = () => {
        const d = new Date();
        const y = d.getFullYear();
        const m = String(d.getMonth() + 1).padStart(2, "0");
        const day = String(d.getDate()).padStart(2, "0");
        return `${y}-${m}-${day}`;
    };
    const [costPrice, setCostPrice] = useState(0);
    const [orderDate, setOrderDate] = useState(todayLocal());
    const [isPurchase, setIsPurchase] = useState(false); // true = ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß, false = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢
    const markModified = (id) => {
        setModifiedIds((prev) => (prev.includes(id) ? prev : [...prev, id]));
    };
    const [groupBy, setGroupBy] = useState("category"); // "location" | "category"
    // ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° StockLocationID ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
    // const groups = useMemo(() => {
    //     if (!items || items.length === 0) return [];

    //     // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏£‡πá‡∏≠‡∏û‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
    //     const catId = (it) => it.stockCategoryID ?? it.stockCategoryId ?? it.categoryID ?? it.categoryId;
    //     const catName = (it) => it.stockCategoryName ?? it.categoryName;

    //     const locId = (it) => it.stockLocationID ?? it.stockLocationId ?? it.locationID ?? it.locationId;
    //     const locName = (it) => it.stockLocationName ?? it.locationName;

    //     const idOf = (it) => groupBy === "category" ? catId(it) : locId(it);
    //     const nameOf = (it) => groupBy === "category" ? catName(it) : locName(it);

    //     const map = new Map(); // id -> { id, name, items: [] }
    //     for (const it of items) {
    //         const id = Number(idOf(it) ?? -1); // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ñ‡∏π‡∏Å
    //         const name = nameOf(it) ?? (groupBy === "category" ? `‡∏´‡∏°‡∏ß‡∏î #${id}` : `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á #${id}`);
    //         if (!map.has(id)) map.set(id, { id, name, items: [] });
    //         map.get(id).items.push(it);
    //     }

    //     return Array.from(map.values())
    //         .sort((a, b) => a.id - b.id) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° id
    //         .map(g => ({
    //             ...g,
    //             items: g.items.sort((a, b) => (a.itemName ?? "").localeCompare(b.itemName ?? "")), // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
    //         }));
    // }, [items, groupBy]);
    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç groups ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
    const groups = useMemo(() => {
        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ items (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° zeroItems)
        if (!items || items.length === 0) return [];

        const catId = (it) => it.stockCategoryID ?? it.stockCategoryId ?? it.categoryID ?? it.categoryId;
        const catName = (it) => it.stockCategoryName ?? it.categoryName;
        const locId = (it) => it.stockLocationID ?? it.stockLocationId ?? it.locationID ?? it.locationId;
        const locName = (it) => it.stockLocationName ?? it.locationName;

        const idOf = (it) => groupBy === "category" ? catId(it) : locId(it);
        const nameOf = (it) => groupBy === "category" ? catName(it) : locName(it);

        const map = new Map();
        for (const it of items) {
            const id = Number(idOf(it) ?? -1);
            const name = nameOf(it) ?? (groupBy === "category" ? `‡∏´‡∏°‡∏ß‡∏î #${id}` : `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á #${id}`);
            if (!map.has(id)) map.set(id, { id, name, items: [] });
            map.get(id).items.push(it);
        }

        return Array.from(map.values())
            .sort((a, b) => a.id - b.id)
            .map(g => ({
                ...g,
                items: g.items.sort((a, b) => (a.itemName ?? "").localeCompare(b.itemName ?? "")),
            }));
    }, [items, groupBy]); // ‚úÖ ‡∏•‡∏ö zeroItems ‡πÅ‡∏•‡∏∞ showZeroItems ‡∏≠‡∏≠‡∏Å

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° groups ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const zeroGroups = useMemo(() => {
        if (!zeroItems || zeroItems.length === 0) return [];

        const catId = (it) => it.stockCategoryID ?? it.stockCategoryId ?? it.categoryID ?? it.categoryId;
        const catName = (it) => it.stockCategoryName ?? it.categoryName;
        const locId = (it) => it.stockLocationID ?? it.stockLocationId ?? it.locationID ?? it.locationId;
        const locName = (it) => it.stockLocationName ?? it.locationName;

        const idOf = (it) => groupBy === "category" ? catId(it) : locId(it);
        const nameOf = (it) => groupBy === "category" ? catName(it) : locName(it);

        const map = new Map();
        for (const it of zeroItems) {
            const id = Number(idOf(it) ?? -1);
            const name = nameOf(it) ?? (groupBy === "category" ? `‡∏´‡∏°‡∏ß‡∏î #${id}` : `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á #${id}`);
            if (!map.has(id)) map.set(id, { id, name, items: [] });
            map.get(id).items.push(it);
        }

        return Array.from(map.values())
            .sort((a, b) => a.id - b.id)
            .map(g => ({
                ...g,
                items: g.items.sort((a, b) => (a.itemName ?? "").localeCompare(b.itemName ?? "")),
            }));
    }, [zeroItems, groupBy]);

    // ...‡πÉ‡∏ô component
    const [alertOpen, setAlertOpen] = useState(false);
    const [alertTitle, setAlertTitle] = useState("");
    const [alertMessage, setAlertMessage] = useState("");
    const [alertNext, setAlertNext] = useState(null); // callback ‡∏´‡∏•‡∏±‡∏á OK

    // ‡∏õ‡∏∏‡πà‡∏° OK ‡∏Ç‡∏≠‡∏á modal
    const handleAlertOk = () => {
        setAlertOpen(false);
        if (typeof alertNext === "function") {
            alertNext();
        }
    };

    useEffect(() => {
        if (!orderId) {
            navigate("/stock");
            return;
        }
        const ac = new AbortController();     // ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å request ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount
        setLoading(true);

        (async () => {
            try {
                if (!orderId || orderId === "new") {
                    navigate("/stock", { replace: true });

                } else {
                    // üîπ ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ö‡πÄ‡∏î‡∏¥‡∏°: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á qty ‡πÄ‡∏î‡∏¥‡∏°
                    const res = await api.post("/stock/GetStockCountLogByCostId", {
                        costId: orderId,
                        //IsStockIn: true, // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤
                    });
                    const raw = res?.data ?? [];  // backend ‡∏´‡πà‡∏≠‡πÉ‡∏ô { success, data, message }
                    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà StockInQTY > 0

                    const mainItems = raw.stockCountDtos.filter(s => s.stockInQTY > 0 || s.purchaseQTY > 0);
                    const zeroStockItems = raw.stockCountDtos.filter(s => s.stockInQTY <= 0 && s.purchaseQTY <= 0);

                    const mainList = mainItems.map(s => ({
                        stockLogId: s.stockLogId,
                        stockId: s.stockId,
                        itemName: s.itemName,
                        stockCategoryID: s.stockCategoryID,
                        stockCategoryName: s.stockCategoryName,
                        stockUnitTypeID: s.stockUnitTypeID,
                        stockUnitTypeName: s.stockUnitTypeName,
                        stockLocationID: s.stockLocationID,
                        stockLocationName: s.stockLocationName,
                        totalQTY: s.totalQTY,
                        requiredQTY: s.requiredQTY,
                        stockInQTY: s.stockInQTY,
                        remark: s.remark,
                        price: 0, // ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
                        purchaseQTY: (s.purchaseQTY == 0 ? "" : s.purchaseQTY) // ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
                    }));

                    const zeroList = zeroStockItems.map(s => ({
                        stockLogId: s.stockLogId,
                        stockId: s.stockId,
                        itemName: s.itemName,
                        stockCategoryID: s.stockCategoryID,
                        stockCategoryName: s.stockCategoryName,
                        stockUnitTypeID: s.stockUnitTypeID,
                        stockUnitTypeName: s.stockUnitTypeName,
                        stockLocationID: s.stockLocationID,
                        stockLocationName: s.stockLocationName,
                        totalQTY: s.totalQTY,
                        requiredQTY: s.requiredQTY,
                        stockInQTY: s.stockInQTY,
                        remark: s.remark,
                        price: 0,
                        purchaseQTY: (s.purchaseQTY == 0 ? "" : s.purchaseQTY) // ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
                    }));

                    setItems(mainList);
                    setZeroItems(zeroList);

                    setOrderDate(raw.stockInDate || todayLocal()); // ‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á
                    setCostPrice((raw.costPrice == 0 ? "" : raw.costPrice));
                }

                // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå/‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
                setModifiedIds?.([]);
                setInvalidIds?.([]);
                setErrorMsg?.("");

            } catch (err) {
                if (ac.signal.aborted) return;    // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠
                console.error(err);
                setItems([]);
                setErrorMsg?.("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
            } finally {
                if (!ac.signal.aborted) setLoading(false);
            }
        })();

        return () => ac.abort();              // cleanup: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å request ‡πÄ‡∏°‡∏∑‡πà‡∏≠ unmount
    }, [orderId, navigate]);



    // const onQtyChange = (stockId, value) => {
    //     // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    //     if (value === "" || (/^\d+$/.test(value) && Number(value) >= 0)) {
    //         setItems((prev) => prev.map((x) => (x.stockId === stockId ? { ...x, purchaseQTY: value } : x)));
    //         setInvalidIds((prev) => prev.filter((x) => x !== stockId)); // ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å invalid
    //         markModified(stockId);
    //     }
    // };

    const onQtyChange = (stockId, value) => {
        if (value === "" || (/^\d+$/.test(value) && Number(value) >= 0)) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô items
            setItems((prev) => prev.map((x) => (x.stockId === stockId ? { ...x, purchaseQTY: value } : x)));
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô zeroItems
            setZeroItems((prev) => prev.map((x) => (x.stockId === stockId ? { ...x, purchaseQTY: value } : x)));

            setInvalidIds((prev) => prev.filter((x) => x !== stockId));
            markModified(stockId);
        }
    };

    // const onClickCopyQTYtoPurchaseQTY = (stockId, value) => {
    //     setItems((prev) => prev.map((x) => (x.stockId === stockId ? { ...x, purchaseQTY: value } : x)));
    //     markModified(stockId);
    // };
    const onClickCopyQTYtoPurchaseQTY = (stockId, value) => {
        setItems((prev) => prev.map((x) => (x.stockId === stockId ? { ...x, purchaseQTY: value } : x)));
        setZeroItems((prev) => prev.map((x) => (x.stockId === stockId ? { ...x, purchaseQTY: value } : x)));
        markModified(stockId);
    };
    // ‚úÖ 2. Early Return ‡∏´‡∏•‡∏±‡∏Å - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô render
    if (!orderId) {
        return null; // üî• ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Early Return ‡∏´‡∏•‡∏±‡∏Å
    }
    const validate = () => {
        const invalid = items.filter((it) => it.purchaseQTY === "");
        setInvalidIds(invalid.map((it) => it.stockId));
        if (invalid.length > 0) {
            setErrorMsg(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö (${invalid.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á)`);
            return false;
        }
        setErrorMsg("");
        return true;
    };

    // const save = async () => {
    //     if (!validate()) return;

    //     setIsSaving(true);

    //     const nowTime = new Date().toLocaleTimeString("en-GB", {
    //         hour12: false, hour: "2-digit", minute: "2-digit", second: "2-digit",
    //     });

    //     // Helper to convert date string (yyyy-MM-dd) to DateOnly format (backend expects ISO string)
    //     const toDateOnly = (dateStr) => dateStr || null;
    //     // Helper to convert time string (HH:mm:ss) to TimeOnly format (backend expects ISO string)
    //     const toTimeOnly = (timeStr) => timeStr || null;
    //     const toIntOrNull = (v) =>
    //         v === "" || v === null || v === undefined ? 0 : Number(v);

    //     const stockInDto = items.map((it) => ({
    //         StockLogId: it.stockLogId ?? 0, // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ stockLogId ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
    //         StockName: it.itemName ?? "",
    //         StockId: Number(it.stockId),
    //         StockInDate: toDateOnly(orderDate),
    //         StockInTime: toTimeOnly(nowTime),
    //         StockInQTY: toIntOrNull(it.stockInQTY),
    //         PurchaseQTY: toIntOrNull(it.purchaseQTY),
    //         Price: toIntOrNull(it.price),
    //         SupplyId: 0, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SupplyId ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ
    //         Remark: it.remark ?? "",
    //         CostId: Number(orderId),
    //         IsStockIn: true,
    //     }));
    //     const UpdateStockCostDto = {
    //         StockInDate: toDateOnly(orderDate),
    //         StockInTime: toTimeOnly(nowTime),
    //         CostPrice: toIntOrNull(costPrice),
    //         IsPurchase: isPurchase,
    //         CostID: Number(orderId),
    //         UpdateBy: authData?.userId ?? 0,
    //     }

    //     const payload = {
    //         UpdateStockCostDto: UpdateStockCostDto,
    //         StockInDto: stockInDto,
    //     };

    //     try {
    //         await api.post("/stock/CreateStockIn", payload);
    //         // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á alert ‡πÅ‡∏ó‡∏ô toast
    //         setAlertTitle("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    //         setAlertMessage("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    //         setAlertNext(() => () => {
    //             navigate("/stock", { state: { shouldRefresh: true } });
    //         });
    //         setAlertOpen(true);

    //     } catch (err) {
    //         console.error(err);
    //         // ‡πÅ‡∏™‡∏î‡∏á alert ‡∏Å‡∏£‡∏ì‡∏µ error ‡∏Å‡πá‡πÑ‡∏î‡πâ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    //         setAlertTitle("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    //         setAlertMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    //         setAlertNext(() => () => { }); // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠
    //         setAlertOpen(true);
    //     } finally {
    //         setIsSaving(false);
    //     }
    // };
    const save = async () => {
        if (!validate()) return;
        // ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞ save: items + zeroItems ‡∏ó‡∏µ‡πà‡∏°‡∏µ purchaseQTY
        const zeroItemsWithQty = zeroItems.filter(it => it.purchaseQTY !== "" && it.purchaseQTY !== "0");
        const allItemsToSave = [...items, ...zeroItemsWithQty];

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const invalid = items.filter((it) => it.purchaseQTY === "");
        if (invalid.length > 0) {
            setErrorMsg(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö (${invalid.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á)`);
            return;
        }

        setIsSaving(true);

        const nowTime = new Date().toLocaleTimeString("en-GB", {
            hour12: false, hour: "2-digit", minute: "2-digit", second: "2-digit",
        });

        const toDateOnly = (dateStr) => dateStr || null;
        const toTimeOnly = (timeStr) => timeStr || null;
        const toIntOrNull = (v) => v === "" || v === null || v === undefined ? 0 : Number(v);

        // ‚úÖ ‡πÉ‡∏ä‡πâ allItemsToSave ‡πÅ‡∏ó‡∏ô items
        const stockInDto = allItemsToSave.map((it) => ({
            StockLogId: it.stockLogId ?? 0,
            StockName: it.itemName ?? "",
            StockId: Number(it.stockId),
            StockInDate: toDateOnly(orderDate),
            StockInTime: toTimeOnly(nowTime),
            StockInQTY: toIntOrNull(it.stockInQTY),
            PurchaseQTY: toIntOrNull(it.purchaseQTY),
            Price: toIntOrNull(it.price),
            SupplyId: 0,
            Remark: it.remark ?? "",
            CostId: Number(orderId),
            IsStockIn: true,
        }));

        const UpdateStockCostDto = {
            StockInDate: toDateOnly(orderDate),
            StockInTime: toTimeOnly(nowTime),
            CostPrice: toIntOrNull(costPrice),
            IsPurchase: isPurchase,
            CostID: Number(orderId),
            UpdateBy: authData?.userId ?? 0,
        }

        const payload = {
            UpdateStockCostDto: UpdateStockCostDto,
            StockInDto: stockInDto,
        };

        try {
            await api.post("/stock/CreateStockIn", payload);
            console.log("Saving payload:", payload); // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
            setAlertTitle("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            setAlertMessage("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
            setAlertNext(() => () => {
                navigate("/stock", { state: { shouldRefresh: true } });
            });
            setAlertOpen(true);

        } catch (err) {
            console.error(err);
            setAlertTitle("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            setAlertMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
            setAlertNext(() => () => { });
            setAlertOpen(true);
        } finally {
            setIsSaving(false);
        }
    };


    const isSaveDisabled = items.some((it) => it.purchaseQTY === "");

    return (
        <div className="p-4 space-y-4">

            <div className="flex items-center justify-between">
                <h1 className="text-xl font-bold">
                    {`‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á: ${orderId}`}
                </h1>

            </div>
            <div className="flex items-center justify-between">
                <div className="join">
                    <button
                        className={`btn btn-sm join-item ${groupBy === "location" ? "btn-primary" : "btn-outline"}`}
                        onClick={() => setGroupBy("location")}
                        title="‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Å‡πá‡∏ö"
                    >
                        ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Å‡πá‡∏ö
                    </button>
                    <button
                        className={`btn btn-sm join-item ${groupBy === "category" ? "btn-primary" : "btn-outline"}`}
                        onClick={() => setGroupBy("category")}
                        title="‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                    >
                        ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                    </button>
                </div>

                {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ stockInQTY <= 0 */}
                <button
                    className={`btn btn-sm ${showZeroItems ? "btn-warning" : "btn-outline"}`}
                    onClick={() => setShowZeroItems(!showZeroItems)}
                    title={showZeroItems ? "‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠" : "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠"}
                >
                    {showZeroItems ? "‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" : `‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (${zeroItems.length})`}
                </button>
            </div>

            {errorMsg && (
                <div className="alert alert-warning">
                    <span>{errorMsg}</span>
                </div>
            )}

            <div className="card bg-base-100 shadow">
                <div className="card-body p-0">
                    {loading ? (
                        <div className="flex items-center gap-2">
                            <span className="loading loading-spinner loading-sm"></span> ‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‚Ä¶
                        </div>
                    ) : (
                        <div className="overflow-x-auto">
                            <table className="table">
                                <thead>
                                    <tr>
                                        <th className="sticky left-0 bg-base-100 z-20">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>

                                        <th className="text-right">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ</th>
                                        <th className="text-right">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ</th>
                                        <th className="text-right bg-warning text-warning-content">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤</th>
                                        <th className="text-right bg-success text-success-content">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏£‡∏¥‡∏á</th>
                                        <th>‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                                        <th className="text-right">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤</th>
                                        <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                                        <th className="text-right">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {(!items || items.length === 0) && (
                                        <tr>
                                            <td colSpan="9" className="text-center text-base-content/60">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</td>
                                        </tr>
                                    )}

                                    {groups.map(group => (
                                        <Fragment key={`grp-${group.id}`}>
                                            {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° */}
                                            <tr className="bg-base-200">
                                                <td colSpan={9} className="font-bold text-lg bg-info">
                                                    {group.name}
                                                </td>
                                            </tr>

                                            {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° */}
                                            {group.items.map((it) => {
                                                const modified = modifiedIds.includes(it.stockId);
                                                const invalid = invalidIds.includes(it.stockId);
                                                const rowClass = invalid ? "bg-error/30" : modified ? "bg-warning/20" : "";
                                                const rowClassItemName = invalid ? "bg-error" : modified ? "bg-warning" : "";
                                                return (
                                                    <tr key={it.stockId} className={rowClass}>
                                                        <td className={`sticky left-0 bg-base-100 z-10 ${rowClassItemName}`}>{it.itemName}</td>
                                                        <td className="text-right text-lg">{it.requiredQTY}</td>
                                                        <td className="text-right">{it.totalQTY}</td>

                                                        <td className="text-right bg-warning/10">
                                                            <div className="flex items-center justify-between">
                                                                <button
                                                                    onClick={() => { onClickCopyQTYtoPurchaseQTY(it.stockId, it.stockInQTY) }}
                                                                    className="btn btn-xs btn-outline btn-warning"
                                                                    title="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤"
                                                                >
                                                                    üìã
                                                                </button>
                                                                <span className="text-right">{it.stockInQTY}</span>
                                                            </div>
                                                        </td>

                                                        {/* ‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ */}
                                                        <td className="text-right bg-success/10">
                                                            <div className="flex items-center justify-end gap-2">
                                                                <button
                                                                    className="btn btn-xs btn-outline btn-error"
                                                                    onClick={() => {
                                                                        const n = Math.max(0, Number(it.purchaseQTY || 0) - 1);
                                                                        setItems((prev) =>
                                                                            prev.map((x) => (x.stockId === it.stockId ? { ...x, purchaseQTY: String(n) } : x))
                                                                        );
                                                                        setInvalidIds((prev) => prev.filter((x) => x !== it.stockId));
                                                                        markModified(it.stockId);
                                                                    }}
                                                                >
                                                                    -
                                                                </button>

                                                                <input
                                                                    type="number"
                                                                    min="0"
                                                                    max="99"
                                                                    className="input input-bordered input-sm w-14 text-center text-lg"
                                                                    value={it.purchaseQTY ?? ""}
                                                                    onChange={(e) => onQtyChange(it.stockId, e.target.value)}
                                                                />

                                                                <button
                                                                    className="btn btn-xs btn-outline btn-success"
                                                                    onClick={() => {
                                                                        const n = Number(it.purchaseQTY || 0) + 1;
                                                                        setItems((prev) =>
                                                                            prev.map((x) => (x.stockId === it.stockId ? { ...x, purchaseQTY: String(n) } : x))
                                                                        );
                                                                        setInvalidIds((prev) => prev.filter((x) => x !== it.stockId));
                                                                        markModified(it.stockId);
                                                                    }}
                                                                >
                                                                    +
                                                                </button>
                                                            </div>
                                                        </td>
                                                        {/* ‡∏´‡∏ô‡πà‡∏ß‡∏¢ */}
                                                        <td className="text-left">
                                                            {it.unitTypeName || it.stockUnitTypeName || "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
                                                        </td>
                                                        {/* ‡∏£‡∏≤‡∏Ñ‡∏≤ */}
                                                        <td className="text-right">
                                                            <input
                                                                type="number"
                                                                min="0"
                                                                step="0.01"
                                                                className="input input-bordered input-primary input-sm w-24 text-right text-lg"
                                                                value={it.price || ""}
                                                                onChange={(e) => {
                                                                    const v = e.target.value;
                                                                    setItems((prev) =>
                                                                        prev.map((x) => (x.stockId === it.stockId ? { ...x, price: v } : x))
                                                                    );
                                                                    markModified(it.stockId);
                                                                }}
                                                            />
                                                        </td>
                                                        {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
                                                        <td className="text-left">
                                                            <div className="flex items-center justify-end gap-2">
                                                                <input
                                                                    type="text"
                                                                    className="input input-bordered input-xs w-40 text-left"
                                                                    value={it.remark}
                                                                    onChange={(e) => {
                                                                        const newRemark = e.target.value;
                                                                        setItems((prev) =>
                                                                            prev.map((x) => (x.stockId === it.stockId ? { ...x, remark: newRemark } : x))
                                                                        );
                                                                        markModified(it.stockId);
                                                                    }}
                                                                />
                                                            </div>
                                                        </td>

                                                        {/* ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå */}
                                                        <td className="text-right">
                                                            <button
                                                                className="btn btn-xs btn-outline btn-error"
                                                                onClick={() => {
                                                                    setItems((prev) =>
                                                                        prev.map((x) => (x.stockId === it.stockId ? { ...x, purchaseQTY: "", price: 0, } : x))
                                                                    );
                                                                    setModifiedIds((prev) => prev.filter((x) => x !== it.stockId));
                                                                    setInvalidIds((prev) => prev.filter((x) => x !== it.stockId));
                                                                }}
                                                            >
                                                                ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
                                                            </button>
                                                        </td>
                                                    </tr>
                                                );
                                            })}
                                        </Fragment>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    )}
                </div>
            </div>

            {/* ‚úÖ Card ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ showZeroItems = true) */}
            {showZeroItems && (
                <div className="card bg-base-100 shadow border-2 border-warning">
                    <div className="card-header p-4 border-b bg-warning/10">
                        <div className="flex items-center justify-between">
                            <h2 className="text-lg font-semibold text-warning-content">
                                ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤)
                            </h2>
                            <div className="badge badge-warning h-max">
                                {zeroItems.filter(it => it.purchaseQTY !== "").length} / {zeroItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
                            </div>
                        </div>
                    </div>
                    <div className="card-body p-0">
                        <div className="overflow-x-auto">
                            <table className="table">
                                <thead>
                                    <tr>
                                        <th className="sticky left-0 bg-base-100 z-20">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                                        <th className="text-right">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ</th>
                                        <th className="text-right">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ</th>
                                        <th className="text-right bg-warning text-warning-content">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤</th>
                                        <th className="text-right bg-success text-success-content">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏£‡∏¥‡∏á</th>
                                        <th>‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                                        <th className="text-right">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤</th>
                                        <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                                        <th className="text-right">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {(!zeroItems || zeroItems.length === 0) && (
                                        <tr>
                                            <td colSpan="9" className="text-center text-base-content/60">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</td>
                                        </tr>
                                    )}

                                    {zeroGroups.map(group => (
                                        <Fragment key={`zero-grp-${group.id}`}>
                                            {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° */}
                                            <tr className="bg-base-200">
                                                <td colSpan={9} className="font-bold text-lg bg-warning/20">
                                                    {group.name}
                                                </td>
                                            </tr>

                                            {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° */}
                                            {group.items.map((it) => {
                                                const modified = modifiedIds.includes(it.stockId);
                                                const hasValue = it.purchaseQTY !== "";
                                                const rowClass = hasValue ? "bg-success/20" : modified ? "bg-warning/20" : "";
                                                const rowClassItemName = hasValue ? "bg-success/30" : modified ? "bg-warning" : "";
                                                return (
                                                    <tr key={it.stockId} className={rowClass}>
                                                        <td className={`sticky left-0 bg-base-100 z-10 ${rowClassItemName}`}>{it.itemName}</td>
                                                        <td className="text-right text-lg">{it.requiredQTY}</td>
                                                        <td className="text-right">{it.totalQTY}</td>

                                                        <td className="text-right bg-warning/10">
                                                            <div className="flex items-center justify-between">
                                                                <button
                                                                    onClick={() => { onClickCopyQTYtoPurchaseQTY(it.stockId, it.stockInQTY) }}
                                                                    className="btn btn-xs btn-outline btn-warning"
                                                                    title="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤"
                                                                >
                                                                    üìã
                                                                </button>
                                                                <span className="text-right">{it.stockInQTY}</span>
                                                            </div>
                                                        </td>

                                                        {/* ‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ */}
                                                        <td className="text-right bg-success/10">
                                                            <div className="flex items-center justify-end gap-2">
                                                                <button
                                                                    className="btn btn-xs btn-outline btn-error"
                                                                    onClick={() => {
                                                                        const n = Math.max(0, Number(it.purchaseQTY || 0) - 1);
                                                                        setZeroItems((prev) =>
                                                                            prev.map((x) => (x.stockId === it.stockId ? { ...x, purchaseQTY: String(n) } : x))
                                                                        );
                                                                        markModified(it.stockId);
                                                                    }}
                                                                >
                                                                    -
                                                                </button>

                                                                <input
                                                                    type="number"
                                                                    min="0"
                                                                    max="99"
                                                                    className="input input-bordered input-sm w-14 text-center text-lg"
                                                                    value={it.purchaseQTY ?? ""}
                                                                    onChange={(e) => onQtyChange(it.stockId, e.target.value)}
                                                                />

                                                                <button
                                                                    className="btn btn-xs btn-outline btn-success"
                                                                    onClick={() => {
                                                                        const n = Number(it.purchaseQTY || 0) + 1;
                                                                        setZeroItems((prev) =>
                                                                            prev.map((x) => (x.stockId === it.stockId ? { ...x, purchaseQTY: String(n) } : x))
                                                                        );
                                                                        markModified(it.stockId);
                                                                    }}
                                                                >
                                                                    +
                                                                </button>
                                                            </div>
                                                        </td>
                                                        {/* ‡∏´‡∏ô‡πà‡∏ß‡∏¢ */}
                                                        <td className="text-left">
                                                            {it.unitTypeName || it.stockUnitTypeName || "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
                                                        </td>
                                                        {/* ‡∏£‡∏≤‡∏Ñ‡∏≤ */}
                                                        <td className="text-right">
                                                            <input
                                                                type="number"
                                                                min="0"
                                                                step="0.01"
                                                                className="input input-bordered input-primary input-sm w-24 text-right text-lg"
                                                                value={it.price || ""}
                                                                onChange={(e) => {
                                                                    const v = e.target.value;
                                                                    setZeroItems((prev) =>
                                                                        prev.map((x) => (x.stockId === it.stockId ? { ...x, price: v } : x))
                                                                    );
                                                                    markModified(it.stockId);
                                                                }}
                                                            />
                                                        </td>
                                                        {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
                                                        <td className="text-left">
                                                            <div className="flex items-center justify-end gap-2">
                                                                <input
                                                                    type="text"
                                                                    className="input input-bordered input-xs w-40 text-left"
                                                                    value={it.remark}
                                                                    onChange={(e) => {
                                                                        const newRemark = e.target.value;
                                                                        setZeroItems((prev) =>
                                                                            prev.map((x) => (x.stockId === it.stockId ? { ...x, remark: newRemark } : x))
                                                                        );
                                                                        markModified(it.stockId);
                                                                    }}
                                                                />
                                                            </div>
                                                        </td>

                                                        {/* ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå */}
                                                        <td className="text-right">
                                                            <button
                                                                className="btn btn-xs btn-outline btn-error"
                                                                onClick={() => {
                                                                    setZeroItems((prev) =>
                                                                        prev.map((x) => (x.stockId === it.stockId ? { ...x, purchaseQTY: "", price: 0, } : x))
                                                                    );
                                                                    setModifiedIds((prev) => prev.filter((x) => x !== it.stockId));
                                                                }}
                                                            >
                                                                ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
                                                            </button>
                                                        </td>
                                                    </tr>
                                                );
                                            })}
                                        </Fragment>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            )}

            <div className="card bg-base-100 shadow">
                <div className="card-body">
                    <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                        <span className="text-sm">
                            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤:{" "}
                            <input
                                type="date"
                                className="input input-bordered input-sm w-40"
                                value={orderDate}
                                onChange={(e) => setOrderDate(e.target.value)}
                            />
                        </span>
                        <span className="text-sm  flex items-center gap-2">
                            ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:{" "}
                            <input
                                type="number"
                                min="0"
                                step="0.01"
                                className="input input-bordered input-sm text-lg w-32 text-right"
                                value={costPrice || ""}
                                onChange={(e) => setCostPrice(e.target.value)}
                                tabIndex={-1}
                            />
                            <span className="text-sm">‡∏ö‡∏≤‡∏ó</span>
                        </span>
                        <span className="text-sm flex items-center gap-2">
                            <input type="checkbox"
                                className="toggle toggle-primary"
                                checked={isPurchase}
                                onChange={(e) => setIsPurchase(e.target.checked)} />
                            <span>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
                        </span>
                        <button
                            className="btn btn-primary w-50"
                            onClick={save}
                            disabled={isSaveDisabled || isSaving}
                            title={isSaveDisabled ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" : ""}
                        >
                            {isSaving ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"}
                        </button>
                    </div>
                    {alertOpen && (
                        <div className="modal modal-open">
                            <div className="modal-box">
                                <h3 className="font-bold text-lg">{alertTitle}</h3>
                                <p className="py-2">{alertMessage}</p>
                                <div className="modal-action">
                                    <button className="btn btn-primary" onClick={handleAlertOk}>
                                        OK
                                    </button>
                                </div>
                            </div>
                            {/* ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏°/label ‡∏ö‡∏ô backdrop ‚Üí ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î */}
                            <div className="modal-backdrop"></div>
                        </div>
                    )}
                </div>
            </div>

        </div>
    );
}
